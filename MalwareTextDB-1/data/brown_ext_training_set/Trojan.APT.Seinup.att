The FireEye research team has recently identified a number of spear phishing activities targeting Asia and ASEAN . 
Of these , one of the spear phishing documents was suspected to have used a potentially stolen document as a decoy . 
The rich and contextual details ( body and metadata ) which are not available online lead us to believe this was stolen . 
This decoy document mentioned countries such as Brunei , Cambodia , Indonesia , Laos , Malaysia , Myanmar , Philippines , Singapore , Thailand , and Vietnam , which leads us to suspect that these countries are targeted . 
As the content of this decoy document is suspected to be a stolen sensitive document , the details will not be published . 
This malware was found to have used a number of advance techniques which makes it interesting : 1 . 
The malware leverages Google Docs to perform redirection to evade callback detection . 
This technique was also found in the malware dubbed `` Backdoor.Makadocs '' reported by Takashi Katsuki ( Katsuki , 2012 ) . 
2 . 
It is heavily equipped with a variety of cryptographic functions to perform some of its functions securely . 
3 . 
The malicious DLL is manually loaded into memory which hides from DLL listing . 
As depicted in the diagram below , the spear phishing document ( which exploits CVE-2012-0158 ) creates a decoy document and a malware dropper named exp1ore.exe . 
This dropper will then drop wab.exe ( Address Book Application ) and wab32res.dll ( malicious DLL ) inside the temp folder . 
By running wab.exe , the malicious DLL named wab32res.dll ( located within the same folder ) will be loaded using DLL side-loading technique . 
This will in turn install a copy of wab32res.dll as msnetrsvw.exe inside the windows directory to be registered as Windows service . 
By registering as a Windows service , it allows the malware to survive every reboot and persist on the network . 
This malware is named `` Trojan.APT.Seinup '' because one of its export functions is named `` seinup '' . 
This malware was analysed to be a backdoor that allows the attacker to remote control the infected system . 
Based on our threat intelligence and reverse-engineering effort , below are some related domain and MD5 sums . 
Please note that some of the domain/IP association may change . 
By connecting the malicious server via Google Docs , the malicious communication is protected by the legitimate SSL provided by Google Docs ( see Figure below ) . 
One possible way to examine the SSL traffic is to make use of a hardware SSL decrypter within an organisation . 
Alternatively , you may want to examine the usage pattern of the users . 
Suppose a particular user accesses Google Docs multiple times a day , the organization 's Incident Response team may want to dig deeper to find out if the traffic is triggered by a human or by malware . 
Below is the code that is used to construct a URL that retrieves command via Google Docs . 
First , the malicious URL is constructed and then encoded . 
Next , the malware simply leverages the Google Docs viewer to retrieve the command from the malicious server ( see Figure below ) . 
The shellcode encryption technique is fairly standard . 
The shellcode has a decryption stub which decrypts its body using the XOR key 0x9E , and this shellcode is used to extract exp1ore.exe ( malware ) and Wor.doc ( benign document ) . 
The exp1ore.exe and Wor.doc were found within the spear phishing document encrypted using the same key ( 0xFC ) and technique . 
The XOR key decrypts only a non-zero byte ( see Figure 5 ) . 
This prevents statistical methods of recovering the XOR key . 
The encrypted executable file and benign document were identified to be located inside the spear phishing document at offsets 0×2509 and 0×43509 respectively . 
Even though statistical methods may not be useful in identifying the XOR key as the zero bytes are not encrypted , we could use some of the `` known '' strings below to hunt for the XOR key in this situation . 
By sliding the known string across the array of bytes to perform a windowed XOR , the key would be revealed when the encoded data is XORed with the known string . 
`` This program can not be run in DOS mode '' `` KERNEL32.dll '' `` LoadLibraryA '' The malware performs the callback in a secure manner . 
It uses a custom Base64 map to encode its data , and creates a salted digital thumbprint to allow validation of data . 
Below describes the steps to validate a callback using an example of the following URL : hxxp : //www.elizabearden.com/waterphp/BYyH.php ? dEIXozUlFzx=5P & wDq=6QeZky42OCQOLQuZ6dC2LQ7F56iAv6GpH6S+w8npH5oAZk== & k4fJdSp7=cc3237bc79192a096440faca0fdae10 & GvQF2lotIr5bT2= The URL could be generalised as follows : Domain/ < PHP > ? < rand 11-13 char > = < A ' > & < rand 3-5 char > = < B ' > & < rand 7-9 char > = < C ' > & < rand 14-16 chars > = < D ' > The definition of A ' , B ' , C ' and D ' are as follows : Let H be the function which encodes binary into hexadecimal characters prepend with `` % '' , if it is not alphanumeric , dash , underscore or dot . 
Let B64 be the base 64 encoder using the following custom map , `` URPBnCF1GuJwH2vbkLN6OQ/5S9TVxXKZaMc8defgiWjmo7pqrAstyz0D+El3I4hY '' . 
Let PT be the plain text which is in the form of `` < HostName > [ < RunType > ] : < IPAddress > { 1 } '' , where HostName and IPAddress are string , and RunType is a character . 
Let A be the random of 3 to 7 characters , and A ' = H ( A ) Let B be B64 ( PT ) , and B ' = H ( B ) Let C be 32 char deliminator , and C ' = H ( C ) Let D be H ( MD5 ( salt + MD5 ( B64 ( PT ) + A + C ) ) ) , salt = `` % ^^*HFH ) * $ FJK ) 234sd2N @ C ( JGl2z94cg23″ , and D ' = H ( D ) Hence , in this case , the specific malicious URL could be applied as follows : Domain/ < PHP > = http : //www.elizabearden.com/waterphp/BYyH.php A ' = `` 5Pb '' B ' = `` 6QeZky42OCQOLQuZ6dC2LQ7F56iAv6GpH6S % 2Bw8npH5oAZk== '' C ' = `` cc3237bc79192a096440faca0fdae107 '' D ' = `` 349118df672db38f9e65659874b60b27 '' ( This is the digital signature ) The hash could be verified as follow : B64 ( PT ) + A + C = `` 6QeZky42OCQOLQuZ6dC2LQ7F56iAv6GpH6S+w8npH5oAZk== '' + `` 5Pb '' + `` cc3237bc79192a096440faca0fdae107 '' MD5 ( B64 ( PT ) + A + C ) = `` 766cf9e96c1a508c59f7ade1c50ecd28 '' MD5 ( salt + MD5 ( B64 ( PT ) + A + C ) ) = MD5 ( `` % ^^*HFH ) * $ FJK ) 234sd2N @ C ( JGl2z94cg23 '' + `` 766cf9e96c1a508c59f7ade1c50ecd28 '' ) = 349118df672db38f9e65659874b60b27 ( This equals to D ' , which means verified ) The encoded plain text ( B ) could be recovered : B64 ( PT ) = `` 6QeZky42OCQOLQuZ6dC2LQ7F56iAv6GpH6S+w8npH5oAZk== '' ; PT = `` MY_COMPUTER_NAME [ F ] :192.168.1.1 { 1 } '' , where `` MY_COMPUTER_NAME '' is the hostname , 'F ' is the run type , `` 192.168.1.1 '' is the IP address . 
Note : This example is mocked up using a dummy computer name and IP address . 
The python code below could be used to decode the custom encoded string ( see Figure below ) . 
The malware was found to perform a callback at random intervals so as to evade network investigation when looking for network connections that are performed in a regular interval . 
Additionally , even the name of the parameters in the get string have a random length and name , which makes it hard to create a fix signature to detect such callbacks ( see 3.3.1 to understand how a callback is created ) . 
On the disk , the malicious code is either encrypted or compressed to evade scanning using signature rules . 
Only upon being loaded into memory , does the malicious code ( that appears to be in the form of a DLL ) get manually loaded without the use of Windows 32 API . 
In this way , when an investigation is performed , the malicious DLL is not revealed . 
Additionally , it makes it much harder for analysis to be performed . 
Taking a deeper look at the decrypted malicious code , this malware was found to contain at least the following functions : Download file Download and execute or load library Change sleep duration Open and close interactive sessions Malware is increasingly becoming more contextually advanced . 
It attempts to appear as much as possible like legitimate software or documents . 
In this example , we would conclude the following . 
1 . 
A potentially stolen document was used as a decoy document to increase its credibility . 
It is also a sign that the compromised organisations could be used as a soft target to compromise their business partners and allies . 
2 . 
It is important to put a stop to the malware infection at the very beginning , which is the exploitation phase . 
Once a network is compromised , it is increasingly harder to detect such threats . 
3 . 
Anti-incident response/forensic techniques are increasingly used to evade detection . 
It would require a keen eye on details and a wealth of experience to identify all these advance techniques . 
Carnegie Mellon University . 
( n.d. ) . 
Retrieved from http : //www.cs.cmu.edu/~fp/courses/15122-f10/misc/rand/mersenne.c0 Katsuki , T. ( 19 Nov , 2012 ) . 
Malware Targeting Windows 8 Uses Google Docs . 
Retrieved from http : //www.symantec.com/connect/blogs/malware-targeting-windows-8- uses-google-docs-0 I would like to thank several colleagues for their significant contributions on this post : Darien Kindlund , Ned Moran , Nart Villeneuve , and Thoufique Haq . 
