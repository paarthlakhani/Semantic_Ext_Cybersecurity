Figure 1 : Attackers working hours ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
7 Figure 2 : Network schema ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
12 Figure 3 : Proxy server login window ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
13 Figure 4 : Poison Ivy interface with the list of connected machines ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
13 Figure 5 : Poison Ivy interface with a shell ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
.. 
14 Figure 6 : Example of network target diagram ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
.. 
17 Figure 7 : Terminator password ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
18 Figure 8 : Terminator CRC algorithm ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
19 Figure 9 : Terminator xor and compare operation on the password ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
19 Figure 10 : Terminator : starting interface ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
20 Figure 11 : Terminator : Protocol and port choice ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
20 Figure 12 : Terminator : List of infected machines ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
20 Figure 13 : Terminator : List of features ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
21 Figure 14 : Terminator : List of processes on the infected machine ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
22 Figure 15 : Terminator : List of opened ports on the infected machine ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
22 Figure 16 : Terminator : Remote shell on the infected machine ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
23 Figure 17 : Terminator : Registry access to the infected machine ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
23 Figure 18 : Terminator : Services management on the infected machine ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
. 
24 Figure 19 : Terminator : Information about the infected machine ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
.. 
24 Figure 20 : Terminator : Installed software on the infected machine ... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
... 
25 1.1 Context The company Mandiant published in February 2013 a report about an Advance Persistent Threat ( APT ) called APT1 . 
The report can be freely downloaded here : http : //intelreport.mandiant.com/ . 
Inspired by this article , we have decided to perform our own technical analysis of this case . 
In the report , Mandiant explains that the attackers were using a well-known Remote Administration Tool ( RAT ) called Poison Ivy and that they were located in China . 
We based our investigation based on those two facts only . 
1.2 Objectives The objective of the mission was to understand how these attackers work . 
Our purpose was to identify their infrastructures , their methodologies and also the tools they used . 
We are convinced that in order to protect our infrastructures against this kind of attacks , we need to analyse , learn and understand the way attackers work . 
1.3 Authors This report has been created by Malware.lu CERT , the first private Computer Security Incident Response Team ( CSIRT ) located in Luxembourg and itrust consulting S.A.R.L , a Luxembourg based company specialising in formation system security . 
We would like to thank the incident response teams who have collaborated with us . 
Thanks for their help and for their support . 
1.4 Ethical choices In this chapter is described our approach about the ethical choices made during this work . 
First , we warned the national and/or private Computer Security Incident Response Teams ( CSIRT - CERT ) associated to the targets of the attackers . 
Before publishing this report , we have waited for a reasonable time . 
Finally , all the servers from which we collected data belonged to the attackers . 
We do not attack or try to attack compromised machines . 
1.5 Document structure This document is structured in the following way :  Chapter 2 deals with the information gathering phase ;  Chapter 3 describes the malware Poison Ivy and a vulnerability of it ;  Chapter 4 is a static analysis of samples ;  Chapter 5 deals with the information we gathered on the attacked command & control ;  Chapter 6 introduces an homemade RAT called terminator ; 2.1 Command & Control scanner In the Mandiant report , it is explained that the attacker used a well-known Remote Administration Tool ( RAT ) called Poison Ivy . 
This RAT can be freely downloaded here : http : //www.poisonivy- rat.com/ . 
This RAT will be discussed in the next chapter . 
To identify the machines that were using this RAT , we have developed a Poison Ivy scanner . 
Here is the code of this scanner : The scanner sends 100 times 0x00 to a specific port and IP . 
If in the response the server sends back 100 other bytes followed by the specific data 0x000015D0 , we know that the running service is a Poison Ivy server . 
We chose to scan the following ports :  3460 ( default Poison Ivy port )  80 ( HTTP port )  443 ( HTTPS port )  8080 ( alternate HTTP port ) . 
We decided to scan a wide IP range located in Hong Kong . 
2.2 IP ranges After removing false positives , we identified 6 IP ranges where Poison Ivy Command & Control servers were running : 2.3 Working hours We had some difficulties to identify the C & C servers because the attackers stopped the Poison Ivy daemon when they were not using it . 
That explains why the scanner did not identify all the C & C servers at certain moments of the day . 
However , using this parameter , we were able to identify their working hours . 
Here is the average working hours for a week ( the hour on the graph is UTC+1 ) : Generally , the attackers worked between 2AM and 10AM from Monday to Saturday included . 
3.1 Description Poison Ivy is a Remote Administration Tool ( RAT ) available here : http : //www.poisonivy- rat.com/index.php ? link=download . 
This RAT is well documented on the Internet . 
Here is a short list of the features it provides : 3.2 Remote code execution vulnerability An exploitable vulnerability has been discovered by Andrzej Dereszowski from SIGNAL 11 . 
The description of the vulnerability can be found here : http : //www.signal11.eu/en/research/articles/ targeted_2010.pdf . 
This vulnerability allows the remote execution of arbitrary code on the command & control server . 
Metasploit framework provides an exploit to use this vulnerability . 
The code is available here : http : //dev.metasploit.com/redmine/projects/framework/repository/entry/ modules/exploits/windows/misc/poisonivy_bof.rb . 
This exploit did not work in our context . 
The exploit has two possible exploitations : - by using the default password : admin - by using brute force As the two methods did not work ; we created a third one . 
This method consists of finding the real password used for the encryption . 
Our homemade exploit with an option for the password is available in Appendix . 
For information , an additional Ruby package is needed to use the camellia cipher . 
The package can be installed using the gem command : root @ alien : # gem install camellia-rb The next step was to find the password used to encrypt the communication . 
3.3 Encryption key brute forcing The RAT uses a key to encrypt the communication . 
The password is set by the administrator and its default value is `` admin '' . 
After a quick search on the Internet , we know that Poison Ivy uses Camellia as encryption algorithm . 
The encryption is made with 16 bytes blocks . 
So we decided to choose the following approach : - Send 100 bytes ( with 0x00 ) to the daemon ( same than in our scanner ) - Get the first 16 bytes as result from the server Here is the formula of the result : Result = Camellia ( 16*0x00 , key ) The result is not a printable value . 
Thus , we decided to make a base64 of this value and add the flag $ camellia $ to identify the algorithm . 
Here is an example of result : $ camellia $ ItGoyeyQIvPjT/qBoDKQZg== To get the key , we developed a `` John the Ripper '' extension . 
`` John the Ripper '' is an open source password cracker . 
The source code can be downloaded here : http : //www.openwall.com/john/ . 
OpenSSL provides the camellia algorithm . 
The code source of the `` John the Ripper '' plugin to crack camellia hashes by using the OpenSSL library is available in the appendix . 
After compiling `` John the Ripper '' , a new format is available : camellia . 
Here is an example of a brute force session : rootbsd @ alien : ~/john-1.7.9-jumbo-7/run $ cat test.txt $ camellia $ ItGoyeyQIvPjT/qBoDKQZg== rootbsd @ alien : ~/john-1.7.9-jumbo-7/run $ ./john 
-- format=camellia test.txt Loaded 1 password hash ( Camellia bruteforce [ 32/32 ] ) No password hashes left to crack ( see FAQ ) rootbsd @ alien : ~/john-1.7.9-jumbo-7/run $ ./john 
-- show test.txt ? : pswpsw 1 password hash cracked , 0 left The key is `` pswpsw '' . 
This key must be used in our homemade Metasploit exploit . 
3.4 Exploitation With the information we previously described , we were able to get access to the attackers servers . 
msf exploit ( poisonivy_bof_v2 ) > show options Module options ( exploit/windows/misc/poisonivy_bof_v2 ) : Payload options ( windows/meterpreter/reverse_https ) : Once connected to the Poison Ivy server , we noticed that the server had no public IP . 
We attacked a server with the IP X.X.X.X ( identified during the scan ) and the meterpreter endpoint IP address was Y.Y.Y.Y . 
We concluded that the Poison Ivy daemon was hidden behind a proxy server , by using port forwarding to hide the real IP of the command & control server . 
We could also identify that the vendor ID of the MAC address is VMWare . 
By listing the processes , we are able to validate this hypothesis : 3.5 Shellcode After a few days the attackers detected our presence on their systems , particularly because of the network connections between their Poison Ivy machines and our machines . 
Using the netstat command they were able to detect our connection . 
Basically , the Poison Ivy server only had connections originating from the proxy server and no connection from any other IP . 
In order to stay stealth we had to connect to the Poison Ivy server through the proxy server . 
To establish this connection we decided to create our own shellcode . 
The principle of our shellcode is as follows : - Once injected in a process , the shellcode looks for open sockets ; - Once a opened socket is detected , this socket is closed ; - After , the shellcode binds itself on the previous open port ; - From now on , we are going to use the same technique than the one used in meterpreter ( bind_tcp ) . 
Our shellcode goal is to close the Poison Ivy daemon 's socket and then open our own socket on the same port . 
Once our socket is opened we can use the proxy chains provided by the attackers to connect to the Poison Ivy server . 
In this case , when attackers checked the opened connections using netstat they could not identify our connection since it appeared to be originating from an infected target… The source code of the shellcode can be found in appendix . 
4.1 Infrastructure schema Our investigation allowed us to draw a network schema of the attackers ' infrastructure . 
Figure 2 : Network schema The infected machines communicate with the proxy through the Internet . 
The proxy server will forward the network packets to the Poison Ivy server . 
The proxy feature is done by an executable called xport.exe . 
This executable can encode network traffic using a xor operation . 
This feature requires having the executable running on both machines : the proxy and the Poison Ivy server . 
The syntax on the proxy server is : xport.exe Proxy_ip proxy_port Poison_Ivy_ip Poison_Ivy_port number The argument number can either be set to 1 or 2 and represents the two different encoding keys . 
The syntax on the Poison Ivy server is : xport.exe Poison_Ivy_ip Poison_Ivy_port localhost Poison_Ivy_daemon_port number The Poison Ivy server is managed by the attackers through a VMWare remote desktop , so that we were not able to get the real IP address of the attacker . 
During our investigation , we identified an established Remote Desktop Protocol ( RDP ) connection between the Poison Ivy server and the proxy server . 
We decided to install a key-logger on the Poison Ivy server that allowed us to see credentials to remotely connect to the proxy server . 
Since the attackers use RDP to manage the proxy server and that we had access , we copied the Windows event logs . 
Those logs contained all IPs which established a successful RDP authentication . 
We identified more than 350 unique IPs : rootbsd @ alien : ~/APT1 $ cat list_ip.txt | sort –u | wc -l 384 We suppose that this list also contains Poison Ivy servers IPs and maybe IPs of attackers who inadvertently connect directly to the proxy ) . 
Here is the screenshot of the proxy RDP authentication : Figure 3 : Proxy server login window Here is the screenshot of the Poison Ivy interface : Figure 4 : Poison Ivy interface with the list of connected machines Here is the screenshot of an attacker using a remote shell to an infected target : Figure 5 : Poison Ivy interface with a shell Using those accesses , we managed to exfiltrate a massive amount of files , event logs , netstat outputs… The interesting information can be divided in two categories : - Information about the tools used by the attackers ; - Information about the targets . 
4.2 Tools The following table provides an overview on the discovered tools . 
The RAT called Terminator will be described in the next chapter . 
We found a batch script similar to the one described in Mandiant 's report : @ echo off echo % computername % > > c : \recycler\ % computername % _base.dat qwinsta > > c : \recycler\ % computername % _base.dat date /t > > c : \recycler\ % computername % _base.dat time /t > > c : \recycler\ % computername % _base.dat ipconfig /all > > c : \recycler\ % computername % _base.dat nbtstat -n > > c : \recycler\ % computername % _base.dat systeminfo > > c : \recycler\ % computername % _base.dat set > > c : \recycler\ % computername % _base.dat net share > > c : \recycler\ % computername % _base.dat net start > > c : \recycler\ % computername % _base.dat tasklist /v > > c : \recycler\ % computername % _base.dat netstat -ano > > c : \recycler\ % computername % _base.dat dir c : \ /a > > c : \recycler\ % computername % _base.dat dir d : \ /a > > c : \recycler\ % computername % _base.dat dir c : \progra~1 > > c : \recycler\ % computername % _base.dat dir c : \docume~1 > > c : \recycler\ % computername % _base.dat net view /domain > > c : \recycler\ % computername % _base.dat dir /a /s c : \ > > c : \recycler\ % computername % _filelist.dat dir /a /s d : \ > > c : \recycler\ % computername % _filelist.dat del c : \recycler\base.bat The purpose of this batch script is to get information about an infected workstation . 
In addition , we found a directory with the official SecureCrt , which is an SSH client . 
We also found the SysInternals suite from Microsoft . 
4.3 Targets The attackers seem to use a dedicated proxy and Poison Ivy server combination for each target . 
When a target discovers the IP address of a proxy , this address is reassigned to another target . 
That 's why it is primordial to share the C & C servers IPs with our partners . 
The targets were private and public companies , political institutions , activists , associations or reporters . 
On the Poison Ivy server , a directory is created for every target . 
Within this directory , a directory for each infected machine was created . 
The naming convention for those directories is HOSTNAME^USERNAME . 
Here is an example : E : \companyABCD\alien^rootbsd\ In those directories files are not sorted in any specific manner . 
The documents types are : - .PPT 
- .XLS 
- .DOC 
- .PDF 
- .JPG 
Among those documents , we found : - Network diagrams ; - Internal IP/user/password combination ( local administrator , domain administrator , root , web , webcam… ) ; - Map of the building with digital code to open doors ; - Security incident listings ; - Security policies ; - … The sensitive documents were password protected . 
The passwords pattern is [ a-z ] { 3,4 } [ 0-9 ] { 3,4 } , so it was easy to brute force them in reasonable time . 
Here is an example of a network diagram . 
Figure 6 : Example of network target diagram 5.1 Description On one of the proxy server , we identified a binary called Terminator3.6.exe . 
After a quick analysis we noticed that this binary is the server side of a homemade Remote Administration Tool ( RAT ) . 
After analysis , we identified that this sample corresponds to Fakem RAT discovered by Trendmicro in January 2013 . 
Additional information can be found there : http : //www.trendmicro.com/cloud- content/us/pdfs/security-intelligence/white-papers/wp-fakem-rat.pdf . 
We were lucky enough to find the client side ( the malware ) on the same server . 
These two binaries allowed us to test the product and see how it works . 
5.2 Password protection When the server is starting , a password is asked : Figure 7 : Terminator password We decided to crack this password . 
A CRC is generated based on the supplied password . 
Here is the algorithm of this CRC : Figure 8 : Terminator CRC algorithm After this operation , a xor , then a compare operation is done : Figure 9 : Terminator xor and compare operation on the password To obtain the password , we developed a brute forcer ; the code source is available in the appendix . 
The first argument is the maximum number or characters and the second is the value used in the comparison ( available in the ASM code ) . 
rootbsd @ alien : ~/terminator $ ./bf 
10 0xdafd58f3 DEBUG : Ap @ hX dafd58f3 dafd58f3 In this case the password to start the server is `` Ap @ hX '' . 
5.3 Features and usage The malware 's way to operate is simple and efficient since it does not embed any specific feature . 
The malware waits for a library ( DLL ) sent from the command and control . 
The attackers then choose a specific feature , and send the associated DLL file to the infected machine . 
The libraries are stored in the server 's executable file as resources . 
The resources are not encrypted but the libraries headers are removed . 
The communication scheme is really weird , the infected machine ( the client ) sent HTML to the C & C . 
The communication starts with : < html > < title > 12356 < /title > < body > This string can be identified in the memory of the process . 
The pattern of the connection is : stage = `` < html > < title > 12356 < /title > < body > '' stage += `` \xa0\xf4\xf6\xf6 '' stage += `` \xf6 '' * ( 0x400 - len ( stage ) ) Here is the main RAT 's GUI : Figure 10 : Terminator : starting interface We can choose between three different protocols : Figure 11 : Terminator : Protocol and port choice When a machine is infected , it appears on the GUI : Figure 12 : Terminator : List of infected machines Below is the interface that is shown once a machine has been selected : Figure 13 : Terminator : List of features On the screenshot we can see the 10 available features . 
Each one of the features matches a DLL file . 
To upload a DLL to the infected machine ( and enable its feature ) , we have to tick the feature's checkbox and then click on `` Upload Plug '' . 
For example , if we choose `` Shell Plug-ins '' , the button '' Shell '' ( on the left pane ) becomes enabled . 
Here is the list of available features : - File management ; - Process management ; - Shell access ; - Screenshot ; - Registry management ; - Services management ; - Get information of the infected machine ; - Keylogger ; - Dump password hashes in memory ; - View user 's files . 
Here are some screenshots of the administration interface : Figure 14 : Terminator : List of processes on the infected machine Figure 15 : Terminator : List of opened ports on the infected machine Figure 16 : Terminator : Remote shell on the infected machine Figure 17 : Terminator : Registry access to the infected machine Figure 18 : Terminator : Services management on the infected machine Figure 19 : Terminator : Information about the infected machine Figure 20 : Terminator : Installed software on the infected machine 5.4 Scanner We decided to create a scanner to identify the servers which were running Terminator . 
Here is the code to identify the service : With this script , we identified more C & C servers managed by the attackers , which allowed us to refine our scheme of the attacker 's infrastructure . 
5.5 Remote code execution vulnerability After a full analysis of the communication protocol , we identified a vulnerability in the Command & Control executable : The server does not correctly parse the data sent by the infected machine . 
We created an exploit to remotely take control of the command & control . 
The code source of the Metasploit exploit is available in the appendix.The exploitation provided the following result . 
Classification Public In this report , we document how we could reveal the methodology and tools used by an attacker . 
The used technologies were commonly known , which supports our fears that such kind of APT affects more and more infrastructures . 
Among them we can find public companies , governmental and political institutions… The most efficient and proactive way to protect an infrastructure and fight back the attackers is to understand their attacks and the way they work . 
An interesting fact is to see the professionalization in this field . 
Here are some key facts about the attackers : - More than 300 servers - Use of proxy servers to hide their activities ; - one server per target ; - custom made malware - working hours , such as office employees - really good organization - … Infrastructures such as the one detailed in this report are expensive but Intelligence is a real issue . 
People or organisations seem do not hesitate to pay for such illegal information theft . 
`` The only real defense is offensive defense '' ( Mao Zedong ) Ivy exploit # # # This file is part of the Metasploit Framework and may be subject to # redistribution and commercial restrictions . 
Please see the Metasploit # web site for more information on licensing and terms of use . 
# http : //metasploit.com/ # # Terminator ( aka Fakem RAT ) password brute forcer // gcc -o bf bf.c // ./bf 
