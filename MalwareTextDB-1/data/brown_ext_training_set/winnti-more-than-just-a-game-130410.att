This research , which started in autumn of 2011 by Kaspersky Lab , is still ongoing . 
The subject of this research project is a series of targeted attacks against private companies around the world . 
In the research , we reveal activity of one of the hacking groups which has Chinese origins . 
This group was named '' Winnti '' . 
According to our estimates , the Winnti group has been active for several years and specializes in cyber-attacks against the online video game industry . 
The main objective of the group is to steal source code of online game projects as well as digital certificates of legitimate software vendors . 
Besides that , they are deeply interested in the set-up of network infrastructure ( including production gaming servers ) and new developments such as conceptual ideas , design and more . 
We are n't the first to investigate the attacks attributed to the Winnti group.. It is known that , at least in 2010 , the U.S.- based company HBGary investigated information security incidents related to the Winnti group at one of HBGary 's customers – an American video game production company . 
In the autumn of 2011 , a Trojan was detected on a large number of computers – all of them linked by the fact that they were used by players of a popular online game . 
It emerged that the piece of malware landed on users' computers as part of a regular update from the game 's official update server . 
Some even suspected that the publisher itself was spying on its customers . 
However , it later became clear that the malicious program ended up on the users ' computers by mistake : the cybercriminals were in fact targeting the companies that develop and release computer games . 
The computer game publisher whose servers spread the Trojan asked Kaspersky Lab to analyze the malicious program that was found on its update server . 
It turned out to be a DLL library compiled for a 64-bit Windows environment and even used a properly signed malicious driver . 
The malicious DLL infected gamers ' computers running under either 32-bit or 64-bit operating systems . 
It could not start in 32-bit environments , but it could , under certain conditions , launch without the user 's knowledge or consent in 64-bit environments , though no such accidental launches have been detected . 
The DLL contained a backdoor payload , or , to be exact , the functionality of a fully-fledged Remote Administration Tool ( RAT ) , which gave the cyber-criminals the ability to control the victim computer without the user 's knowledge . 
The malicious module turned out to be the first Trojan for the 64-bit version of Microsoft Windows with valid digital signature that we have seen . 
We used to see similar cases before , but in all previous incidents we have seen digital signature abuse , there were only 32-bit applications . 
At an early stage of our research , we identified a number of similar backdoors , both 32-bit and 64-bit , in our collection of malware samples . 
Thesewere detected under various verdicts . 
We grouped them together into a separate family . 
Symantec appears to be the first to name these malicious programs ; we kept Symantec 's name – Winnti – in the name of the malware family we created : Backdoor.Win32 ( Win64 ) .Winnti 
. 
As for the people behind these attacks involving this remote administration tool , we ended up calling them `` the Winnti group '' . 
Interestingly , the digital signature belonged to another video game vendor - a private company known as KOG , based in South Korea . 
The main business of this company was MMRPG ( massively multi player online role-playing games ) games , which was identical to the business area of the first victim . 
We contacted KOG , whose certificate was used to sign malicious software and notified Verisign , which issued the certificate for KOG . 
As a result , the certificate was revoked . 
When we discovered the first stolen digital certificate , we did n't realize that stealing the certificates and signing malware for upcoming attacks against other victims was the modus operandi of that group . 
In eighteen months , we manage to discover more than a dozen compromised digital certificates . 
Moreover , we found that those digital certificates seemed to have been used in attacks organized by other hacking groups , presumably coming from China . 
For example , an attack against South Korean social networks Cyworld and Nate in 2011 ( http : //www.bbc.co.uk/news/technology-14323787 ) - the attackers used a Trojan that was digitally signed using the certificate of YNK Japan Inc gaming company . 
) A digital certificate of the same company was used recently ( March 2013 ) in Trojans targeting Tibetan and Uyghur activists ( https : //www.securelist.com/en/blog/208194165/New_Uyghur_and_Tibetan_Themed_Attacks_Using_PDF_Exploi ts ) . 
In fact , this story has long roots dating back to 2011 . 
We highly recommend reading this Norman blog post of a similar incident here : http : //blogs.norman.com/2011/security-research/invisible-ynk-a-code-signing-conundrum . 
At the same time , in March 2013 , Uyghur activists were targeted by another malware which was digitally signed by another gaming company called MGAME Corp according to http : //www.f- secure.com/weblog/archives/00002524.html We believe that the source of all these stolen certificates is same group which we call Winnti . 
This group either has close contacts with other Chinese hacker groups or sells the certificates on the black market in China . 
Below is the list of known compromised companies and digital certificates used by the Winnti group in different campaigns : It 's tempting to assume that Advanced Persistent Threats ( APTs ) primarily target high-level institutions : government agencies , ministries , military and political organizations , power stations , chemical plants , critical infrastructure networks , and so on . 
In this context , it seems unlikely that a commercial company would be at risk unless it was operating on the scale of Google , Adobe or The New York Times , which was recently targeted by a cyber-attack , and this perception is reinforced by the publicity that attacks on corporations and government organizations usually receive . 
However , any company with data that can be effectively monetized is at risk from APTs . 
This is exactly what we encountered here : it was not a governmental , political , military , or industrial organization . 
The target was specifically gaming companies . 
Analyzing the Winnti samples helped to identify who and what were the targets . 
We found that we were dealing with targeted attacks : the Winnti team infects companies that develop and release computer games . 
It appears the team has been active for quite a while – since 2009 . 
It 's difficult to name all the victims of the Winnti team . 
Judging by the information that we have at our disposal – namely the tags within malicious programs , the names of the C & C domains , the companies whose digital certificates were stolen to sign malware , and the countries where detection notifications came from – we can say that at least 35 companies were infected by the Winnti malware at some time . 
Countries where the affected companies are located : This data demonstrates that the Winnti team targets gaming companies located in various parts of the world , albeit with a strong focus on South East Asia . 
This geographic diversity is hardly surprising . 
Often , gaming companies ( both publishers and developers ) are international , having representatives and offices worldwide . 
Also , it is common practice for gaming companies from various regions to cooperate . 
The developers of a game may be located in a different country from its publisher . 
When a game eventually reaches markets in regions away from its initial 'home ' , it is often localized and released by other publishers . 
In the course of this cooperation , the partner companies often grant each other access to network resources to exchange data associated with the gaming content , including distribution kits , gaming resources , resource assembly kits , etc . 
If one company in the network gets infected , it 's easy for the cybercriminals to spread the infection throughout the partnership chain . 
During the investigation , we identified more than a hundred malicious programs , each individually compiled to attack a particular company . 
Typically , separate command-and-control ( C & C ) domains were assigned to each targeted company . 
Virtually all the C & C domains were arranged as follows : a second-level domain was created without a DNS A-record , i.e. , there was no IP address assigned to it . 
In cases where there was an A-record , the assigned IP address was typically 127.0.0.1 . 
It is also noteworthy that some of the second-level domains that the cybercriminals created for their C & C had very similar names to the domain hosting the site of a certain real gaming company . 
And the malicious users ' domain was resolved to the same IP address which the site of the real gaming company used . 
In any case , the third-level domains resolved to IP addresses assigned to the attackers ' actual C & C servers . 
Sometimes the Winnti team registered their C & C units with public hosts . 
Judging by the samples identified , these C & C centers were subdomains of such domains as 6600.org , 8866.org , 9966.org or ddns.net . 
From the names of the C & C domains or subdomains , the attack targets or countries of residence could be guessed , as in : ru.gcgame.info kr.zzsoft.info jp.xxoo.co us.nhntech.com fs.nhntech.com as.cjinternet.us The subdomains `` ru '' , `` kr '' , `` jp '' and `` us '' most probably mean that these C & C servers manage bots hosted on the computers of companies located in Russia , South Korea , Japan and the U.S. respectively , while `` fs '' and `` as '' are acronyms for the names of the companies being attacked . 
Sometimes Winnti 's malicious programs had a local IP address , such as 192.168.1.136 , specified in the settings for the C & C . 
This could mean that , at some point in time , there was an infected computer that did not have a connection to the Internet , but the cybercriminals needed control over it ( it may have been infected while malware was spread via a corporate network ) . 
In this case , the cybercriminals deployed a dedicated local C & C server on another compromised computer within the same local network which did have an Internet connection ; via that C & C , the first victim computer could be controlled . 
System administrators often try to isolate critical computers from the outside world . 
This decreases the probability of haphazard infection , but , apparently , does not always help in a targeted attack . 
In the Winnti samples that were detected and analyzed , we found 36 unique C & C domains . 
Most probably , this is only a small portion of all existing Winnti C & C domains , as we only managed to obtain some of the samples from this malware family . 
This is hardly surprising since these malicious programs are used to execute targeted attacks , so no information is available about many instances of infection ; for this reason , we have no way of obtaining samples of the malware used in these undisclosed attacks . 
Knowing the 2nd level domains used by Winnti , we brute forced through all third level sub-domains up to 4 symbols long , and identified those that have the IP addresses of real servers assigned to them . 
Having searched through subdomains for a total of 12 second level domains , we identified 227 `` live '' third level domains . 
Many of them are C & C servers for Winnti-class malware that have hitherto remained unidentified . 
Analyzing the WHOIS data for the 12 second level domains , we found the following list of email addresses used for registration : evilsex @ gmail.com jslee.jcr @ gmail.com whoismydns @ gmail.com googl3 @ live.com wzcc @ cnkker.com apanku2009 @ gmail.com For some of these domains , registration data proved to be the same as those for the domain google.com : Registrant : Google Inc. 1600 Amphitheatre Parkway Mountain View , California 94043 United States +1.6503300100 Judging by the domain registration data , the Winnti team started their criminal activities as far back as 2007 . 
The early domains were involved in spreading rogue anti-virus programs ( FakeAV ) . 
From 2009 onwards , domains began to emerge hosting C & C servers for bots used to infect gaming companies . 
Apparently , the cybercriminals graduated to relatively large-scale penetrations into the corporate networks of gaming companies starting from 2010 . 
The favorite tool of the attackers is a malicious program we call `` Winnti '' . 
It has evolved since the first use , but we divide all variants into two generations : 1.x and 2.x . 
Our publication describes both variants of this tool . 
The second generation ( 2.x ) was used in one of the attacks that we investigated in the active stage and helped the victim to interrupt data transfer and isolate infections in a corporate network . 
In addition to that , we observed usage of a popular backdoor known as PlugX , which is believed to have Chinese origins , however used only previously in attacks against Tibetan activists . 
As has been stated above , APTs can target any commercial company if cyber-criminals find a way to financially profit from the attack . 
So what methods do cyber-criminals use to generate illicit earnings from attacks on gaming companies ? Based on the available information , we have singled out three main monetization schemes that could be used by the Winnti team . 
 The unfair accumulation of in-game currency/ '' gold '' in online games and the conversion of virtual funds into real money . 
 Theft of source code from the online games server to search for vulnerabilities in games – often linked to point 1 . 
 Theft of source code from the server part of popular online games to further deploy pirate servers . 
Let 's look at an example . 
During our investigation of an infection at a computer gaming company , we found that malware had been created for a particular service on the company 's server . 
The malicious program was looking for a specific process running on the server , injected code into it , and then sought out two places in the process code where it could conceal call commands for its function interceptors . 
Using these function interceptors , the malicious programs modified process data which was processed in those two places , and returned control back . 
Thus , the attackers change the normal execution of the server processes . 
Unfortunately , the company was not able to share its targeted application with us , and we can not say exactly how this malicious interference affected gaming processes . 
The company concerned told us that the attackers ' aim was to acquire gaming `` gold '' illegally . 
Malicious activity like this has an adverse impact on the game itself , tilting the balance in favor of cheats . 
But any changes the Winnti team introduces into the game experience are unlikely to be very noticeable . 
After all , maintaining a skillful balance is the main attribute of online games . 
Users will simply stop playing if they feel that other players are using non-standard methods to create an advantage beyond normal gameplay or if the game loses its intrinsic competitiveness due to resources or artifacts appearing in the game without the developers' knowledge . 
At the same time , the attackers are keen for the game to remain popular ; otherwise , they would be unable to effectively turn all the time and effort of infecting a gaming company into financial gain . 
Members of the Winnti team are patient and cautious . 
Cyber-criminals have affected the processes of the online games from the infected companies and stolen money from them for years , but they have found ways of doing this without attracting attention to themselves . 
Everything starts with a DLL . 
The DLL mimics one of the standard Windows libraries , winmm.dll or apphelp.dll . 
Since , in the vast majority of cases the samples that we detected disguised themselves as winmm.dll , we would like to fix this name for this malicious library at the end of this document . 
Legitimate winmm.dll is a Windows system library that provides multimedia functions . 
It is located in the % WINDIR % \System32 folder . 
The attackers counted on this being a library providing basic system functions and hence the probability of it being loaded by some program is very high ( this is also valid for apphelp.dll ) . 
For example , winmm.dll is loaded by explorer.exe , which is launched during operating system startup and is essential for Windows user interface . 
The mechanism to start the malware is simple : if some benign application depends on Windows winmm.dll ( located in % WINDIR % \System32\winmm.dll ) but the evil twin library with the same name ( winmm.dll ) is located in the folder of benign application , the malicious library will be loaded instead of the system one . 
Taking advantage of their control of an infected computer , the attackers place a malicious library in the % WINDIR % folder . 
The same folder also contains explorer.exe . 
This enables the attackers to ensure that the malicious DLL is loaded at system startup : explorer.exe loads the malicious winmm.dll from the % WINDIR % folder as soon as it launches during system startup . 
But how can a program which depends on the original library work correctly if a malicious winmm.dll is loaded instead of the original library ? Very easy : the malicious library is designed to work as a proxy for the original winmm.dll from the % WINDIR % \System32 folder . 
The cyber-criminals did not reinvent the wheel to make sure that everything works properly . 
They relied on a tool known as AheadLib , which was developed by security researchers to analyze malware . 
This program , which is designed to facilitate the analysis of malicious libraries , was created by a Chinese developer employed by an Asian anti-virus vendor . 
The program accepts a DLL on input and produces a C code which hooks the functions included in the library . 
The C code is compiled back into a DLL , which can then be used as a proxy and provide flexible way to analyze behavior of malicious file . 
The flexibility of this tool allows to customize the logics of malicious application during analysis and overload functions code to provide some debugging output . 
Some code can be added to display parameters of the hooked functions in order to find out which values are passed to the original functions when they are called . 
This method is used in so called dynamic analysis of malicious applications . 
Ironically , the malware authors have found this to be a convenient application for creating malicious proxy- libraries . 
They specified a system library ( winmm.dll ) as a parameter for AheadsLib tool and produced a source code template to create a proxy DLL – in the form of C file . 
By overloading some functions with the malicious payload , the attackers created a complete piece of malware that included all the features of the system DLL . 
Strangely , the attackers kept the code for AheadLib debug messages in the early versions of their malware ( marked with red in the screenshots above ) . 
These strings can also be found in compiled malicious binaries : Later , these fragments were removed from the C file generated by AheadLib . 
The winmm.dll malicious library maintains another library in its body , which is decrypted and loaded into the process memory without creating any files on local disk . 
According to file version info the original name of this library is `` PlusDLL.dll '' . 
This is the platform 's main control component . 
When the additional DLL has been properly allocated in the memory , winmm.dll passes control to it with a parameter – a string which contains bot settings . 
The settings string , in encrypted form , is also located in the winmm.dll body – after the magic word `` PLUSUNIT '' . 
After decryption , the string contains the following : url=lp.gasoft.us:80|ver=1018|tag=33|group=lp80wi Apparently , when the Winnti malware managed to get into focus of security researchers : the authors made modifications of the methods used to store these initial settings . 
In some samples , the settings were hidden even in the executable file 's header : In other variants , the 'PLUSUNIT ' magic string was modified : The PlusDLL library has an embedded driver . 
The driver is stored in % WINDIR % \System32\ < drivername.sys > file , registered as a service and started by NtLoadDriver system API function . 
Immediately after that , the driver 's file is removed , as well as all the registry entries created during service registration . 
The executable preserved the original driver names which are `` PortLess '' and `` PointFilter '' ; however , the driver files used during infection are saved as `` sp1itter.sys '' and `` acplec.sys '' . 
The purpose of the driver is to hide network connections established by the malware . 
For example , if the user decides to check a list of established connections ( e.g. , using the 'netstat –a ' command or the tcpview program ) while the bot is communicating to the control center , the driver will protect and hide the malware connections . 
This approach is used by many rootkits on the Windows platform . 
The driver uses an interesting method to get the list of addresses to protect connections with . 
This information is available in the PlusDLL control library , which normally operates in the context of the explorer.exe process when the infection is active on the computer . 
The address information is sent from the user space ( from PlusDLL ) to the kernel space , where the driver works , via call to NtSetQuotaInformationFile API function . 
During initialization , the driver hooks the NtSetQuotaInformationFile function : Every time the function is called , the driver checks its parameters : to be precise it is HANDLE FileHandle and PVOID Buffer parameters . 
The FileHandle parameter holds a descriptor of the partition on the hard drive where the function is expected to set disk quotas . 
The Buffer parameter is a memory buffer with information of new quotas to be set . 
The driver checks whether the value of the FileHandle parameter is equal to minus two . 
When the system calls the NtSetQuotaInformationFile function to actually change the quotas , the descriptor must be associated with one of the disks . 
Normally such descriptors in the Windows system are positive integers which obviously means that it can not be equal to minus two . 
The negative value is set by the PlusDLL library in order to make the driver detect that the NtSetQuotaInformationFile function was called by that library . 
When calling NtSetQuotaInformationFile , PlusDLL sends information about the network addresses to be protected by the driver via the Buffer parameter . 
If FileHandle is not equal to minus two , the hook function in the driver passes control to system 's original code of NtSetQuoataInformationFile API function and everyhin works as it should be on an uninfected system . 
Note that 64-bit versions of Windows do not allow unsigned drivers to run . 
The malicious driver 's 64-bit versions were signed using stolen certificates . 
During the time that we have been tracking the Winnti group , we found 11 certificates that were used to sign the malware used by the group ( not necessarily drivers only ) . 
Ten of them belong to various companies in the gaming industry . 
As mentioned above , the PlusDLL library is a control module . 
Let 's look at how the cybercriminals implemented the transition to perform the malicious DLL 's main tasks . 
They could have simply called an appropriate function directly or created a separate thread in which to execute it , but for some reason they resorted to a trick : the code of the SetWindowStationUser function in the user32.dll library was modified . 
After modification , the function 's first command became jmp < addr > , where < addr > is the address of the function in the PlusDLL library which implements the malicious library 's main features . 
Immediately after this modification , a thread is created ( CreateThread ) executing code starting from the SetWindowStationUser function address . 
As a result , when control is eventually passed to this function , the inserted command jmp < addr > returns control back to the PlusDLL code . 
The same method is used to execute two more functions in the PlusDLL library . 
One of them is used to initialize network routines ; the other executes procedures terminating the malicious program at the very end . 
The only difference is that instead of SetWindowStationUser , the code of two other functions from user32.dll is modified – EndTask and WinHelpW , respectively . 
It is likely that this was done in order to hide the real addresses of functions in PlusDLL in case its code was analyzed based on its execution logs using an automatic system ( sandbox ) that looks at all function calls . 
If this trick is used , an execution log would only show threads launched from the addresses of the functions SetWindowStationUser , EndTask and WinHelpW , which could potentially confuse researchers . 
Another possibility is that this is an anti-emulation feature . 
Perhaps the emulators built into some anti-virus products are unable to cope with these 'leaps ' – in this case , emulation will not result in the execution of malicious functions , which also suits the cybercriminals ' purposes . 
So what does PlusDLL control ? It turns out that the target functionality is implemented in different files . 
Each file provides a specific remote control feature and is downloaded from the attackers ' server every time the system starts up . 
These files are not saved on disk or in the registry but are loaded directly into the memory . 
At the very start of the operation , after launching the driver , PlusDLL collects information about the infected system . 
A unique identifier for the infected computer is generated based on information about the hard drive and the network adapter 's MAC address , e.g. , TKVFP-XZTTL-KXFWH-RBJLF-FXWJR . 
The attackers are interested primarily in the computer 's name , the program which loaded the malicious library , as well as information about remote desktop sessions ( session name , client name , user name and session time ) . 
All of this data is collected in a buffer , which is then compressed and sent to the attackers ' control center . 
The buffer may look like this : In reply to this initial message from the bot , the control center sends the list of available plugins . 
Plugins are DLL libraries that provide specific remote control functions . 
Upon receiving the list of plugins , the bot downloads them , allocates them in the memory and passes control to these libraries . 
Different C2 servers could push different plugins . 
In total we have discovered eight functional libraries : These plugins form the core toolkit which is used by the perpetrators during attack . 
As you can see , the cybercriminals use an entire inventory of malicious tools to effectively control the remote computer . 
Moreover , they have taken measures to conceal their activities : the plugins do not explicitly appear anywhere except in the computer 's memory ; they do not get saved to the hard drive ; the driver is deleted immediately after launch ; all traces in the registry that could indicate this launch get deleted . 
Only the initial DLL remains on the disk that kick starts the entire process and contains an encrypted version of PlusDLL which is the control DLL . 
One of the weak points in this architecture is that the driver does get saved to the hard drive before it launches , so anti-virus products can detect the emergence of this file . 
The situation is further exacerbated by the fact that the malicious drivers may be signed ( although not all drivers in the Winnti samples that we detected were in fact signed ) . 
An unsigned driver in itself does not have the means to counter antivirus products and its code can be easily recognized as malicious , whereas signed drivers stand a better chance of remaining undetected by antivirus products : certain anti-virus products consider properly signed programs legitimate by default , so as to minimize the chances of false positive responses . 
Kaspersky Lab 's products detect the malicious programs described above under the following verdicts : The initial DLLs winmm.dll and apphelp.dll , the PlusDll.dll control DLLs , and functional loadable modules ( CmdPlus.dll etc . 
) are detected as Backdoor.Win32.Winnti or Backdoor.Win64.Winnti . 
The drivers sp1itter.sys and acplec.sys are detected as Rootkit.Win32.Winnti or Rootkit.Win64.Winnti . 
The data transmitted during the communication between the bot and the C & C server , naturally , do not manifest themselves in any explicit form in online data traffic . 
Since an active remote control practice can generate substantial traffic , cybercriminals compress communication data with the algorithm LZMA , though they do not include the appropriate header inherent to this algorithm . 
The data is transmitted over the TCP protocol . 
The samples that we analyzed established connections between C & C servers and ports 53 , 80 and 443 . 
This port selection is not surprising : they are associated with the protocols DNS , HTTP and HTTPS respectively . 
All three are routinely used in everyday operations , so they are enabled under most firewall policies . 
Besides , large amounts of data typically pass through these ports ( with the possible exception of port 53 ) , which makes it easier for the malicious traffic to remain inconspicuous . 
Although the ports are associated with certain protocols , the actual content of the traffic generated by the malicious program does not correspond to them . 
Early versions of the Winnti platform exhibited the following traffic structure when communicating with C & C : each block of transmitted data started with the magic number 0xdeadface , followed by the number of blocks ( in a DWORD ) , then the hash of the transmitted block ( 8 bytes ) , the size of compressed data ( DWORD ) , the size of source data ( DWORD ) and , finally , the actual compressed data . 
This is where another weak point of the Winnti family of backdoors becomes apparent . 
With this data structure , malicious network traffic could easily be spotted by , for example , the magic number 0xdeadface . 
The cybercriminals probably lost control over victim computers fairly frequently as corporate system administrators identified the intrusion by the unique headers in data packets with the help of IDS/IPS systems , and cleaned their networks . 
In 2011 , new versions of Winnti backdoors appeared that , while still based on the same platform , started to use an updated protocol which included extra encryption to communicate with C & C , so the transmitted data no longer had static marks in them . 
Prior to encryption , the data has the following structure ( very similar to the earlier format ) : the first 4 bytes are taken by the magic number 0xaced1984 , then a DWORD of data packet description , the next DWORD carries a zero value , 8 bytes of the hash of the transmitted block , then a DWORD with the size of the compressed data , a DWORD with the size of the source data and then the actual compressed data : Then the data is encrypted with regular XOR with a random DWORD size value , and in this form transmitted to the C & C . 
Knowing that the first four bytes in the source data must represent the value 0xaced1984 , it is easy to restore the key for the XOR operation when the data were encrypted . 
This is how the above data ( the XOR value was 0x002a7b2e ) looked when it was intercepted in network traffic : Since the encryption key ( the value with which the source data are encrypted with the XOR operation ) is different each time a fragment of data is transmitted , no more static unique labels can be found in the network traffic which would quickly identify the transmitted data as belonging to the Winnti backdoor . 
Employing this fast , basic method , the cybercriminals have made it much harder to expose their programs ' traffic . 
Whichever protocol is used ( with or without extra encryption ) , the workflow of communication between the bot and the C & C stays the same at the initial stage of operation : ● The bot sends the first data block , thus signaling itself ; ● In response , the C & C sends back the list of available plugins ● The bot starts to download plugins , sending one request at a time to download each plugin ● The C & C sends the requested plugin ● The bot sends a message that the plugin has arrived . 
We should note here that , to expedite data downloading , the creators of this platform have quite skillfully implemented asynchronous data transmission in their protocol . 
For instance , the message that the bot has received the first plugin may only arrive at the C & C when nearly all the plugins have been already sent to the bot . 
Having downloaded the malicious payload , the bot deploys the plugins in the memory and initializes them . 
Now it's all set for complete remote control over the victim computer , and the bot switches to standby mode , waiting for the operator to connect and maintaining communication with the C & C by sending `` empty '' messages every 15 seconds or so . 
Apart from supplying the plugins , no more automatic actions are performed by the C & C : all of the work to examine the infected computers is done manually by the attackers . 
Please note , that the following is published with approval from one of the attacked companies which preferred to remain anonymous . 
The real company name was replaced with `` CompanyXYZ '' or simply `` XYZ '' . 
On 21st September 2012 , a Security Officer of CompanyXYZ contacted Kaspersky Lab and reported a cyber-attack incident . 
Anomalous activity was spotted at one of the corporate servers . 
One of the employees noticed a suspicious directory on the server which was created under his account . 
The folder had a large archived file with information that was regarded as company 's intellectual property . 
The anomalies were also confirmed in the network traffic by monitoring software . 
Several suspicious network connections were established from several computer systems , including network domain controllers , to IP addresses which were not associated with any corporate resources or any other known trusted networks . 
The suspicious connections were established on ports 443 and 53 . 
Below is the list of reported IP addresses : 211.60.126.164 ( Seoul , South Korea ) 113.196.70.169 ( Taipei Taiwan ) The security officer at CompanyXYZ did an on-site analysis and managed to locate the process which initiated the suspicious connections using SysInternals Process Explorer tool . 
The connections were initiated by a system process ( svchost.exe ) . 
A full process dump using Process Explorer was made and shared with Kaspersky Lab . 
Our team immediately started searching for malware in the provided process dump . 
A next day , one more dump of svchost.exe from another presumably infected machine was provided . 
We also received an IP address and port that was spotted in the suspicious connections coming from infected machines : 188.120.246.88:80 ( Russia ) . 
Quick search through the dumped processes revealed IP addresses mentioned by the company 's security officers . 
PAGE 26| `` Winnti '' | More than just a game We checked memory around location of the IP address and found no signs of executable code . 
The memory was most likely dynamically allocated on process heap and used as a temporary storage of resolved domain name . 
That is why we had to find another indicator of malicious module related to those IP addresses . 
We initiated a port scan of the suspected hosts in parallel to memory analysis . 
Below is the result on the time of scanning : The server was running Windows Terminal Service or was used as a proxy linked to some Terminal Server . 
Establishing connection via RDP client usually reveals default system locale which is used on welcome screen . 
Below is what we found upon connection : Checking one of IP addresses on robtex.com brought two possible domain names : One of these domains was found in the memory of dumped svchost process . 
Googlefiles.net domain was also found in svchost dump of the Machine # 1 . 
Besides that , several other domain names were discovered in the same memory block : service.interdriver.net service.googlefiles.net service.dell-support.org service.hp-supports.com Next step was to locate the nearest PE header in the memory of svchost and extract the executable module . 
After fixing alignment of the sections the file was ready for further static analysis . 
Date and time from PE header showed that the executable was prepared about a year before current attack was revealed : TimeDateStamp : `` 2011-10-13 07:21:50 '' The executable was a 64-bit application which means that the attackers had already known that CompanyXYZ used 64-bit systems . 
The IP address 188.120.246.88 , which was seen in suspicious connection was also checked . 
Connecting to the port 80 of that address with simple TCP client displayed an HTTP GET request : GET /G-Content_XYZ.rar HTTP/1.1 Accept : */* Cache-Control : no-cache Connection : Keep-Alive Host : 127.0.0.1:81 Pragma : no-cache Range : bytes=23021988299-27335921161 Referer : http : //127.0.0.1:81 User-Agent : Mozilla/4.0 ( compatible ; MSIE 6.0 ; Windows NT 5.1 ; SV1 ; .NET 
CLR 1.1.4322 ; .NET 
CLR 2.0.50727 ) Usually the request is sent by the connecting client , but here the chat between client and server is obviously inversed . 
That is probably done by the attackers ' tunneling setup which established a TCP connection with some local web server within the company network and an external host that received the stolen data . 
According to the request , the attackers were downloading a file called G-Content_XYZ.rar , which seems to be an archive of over 25Gb long . 
The transfer process was instantly interrupted by Security Officers of the company . 
The embedded configuration shows some file names . 
C_20100.NLS was discovered later as the file hosting the same malicious code on the hard drive . 
WinIo.sys is a driver module on Microsoft Windows Server systems used to process networking requests . 
Another interesting piece of data was in a short string `` xyz '' , which probably refers to the attack campaign name and was defined by the attackers , who deliberately put that name to tag the malware . 
The word `` xyz '' most likely stands for the campaign name which comes from the attacked company 's name `` CompanyXYZ '' . 
That was the first evidence that we were dealing with a well-prepared targeted attack against CompanyXYZ . 
From our previous experience , we have seen several targeted attacks against gaming companies and some of them were also tagged after the name of the companies . 
In all those attacks there was a recognizable pattern of the attackers : they always used third-level domain names for the command and control server of the malware while second-level domain name usually resolved to 127.0.0.1 or was a public DDNS domain . 
A quick check confirmed that this tactical pattern was present in this case as well . 
Since then , we believed that it is the same attackers we already knew about . 
This group of attackers was internally labeled `` Winnti '' by one of our researchers , who named it after one of the very first discovered executable malicious modules . 
As soon as we discovered additional configuration , secondary domain names and IP addresses that could be used to control the infected hosts , we instantly reported it to the CompanyXYZ 's Security Officer , who instantly adjusted network firewall rules to block all connections to the attackers ' hosts . 
Assisted remote system analysis of another infected machine resulted in discovery of C_20100.NLS file in the Windows system directory and a reference in the system registry to start malicious module as system service : HKLM\System\CurrentControlSet\services\Nwsapagent\Parameters\ ServiceDll = C : \Windows\system32\c_20100.NLS ServiceMain = StartMain ServiceDllUnloadOnStop = 1 Date of registry key creation was the first discovered time of the attack ( however , we found an earlier date later ) : Thu Sep 6 04:26:19 2012 Malicious service registry settings were hidden by a rootkit module , however it helped to identify an infection as the registry key name was the same on all the affected computers . 
Simple creation of a key named HKLM\System\CurrentControlSet\services\Nwsapagent could fail if the system was infected . 
The rootkit module protected the registry key , but it did n't protect the executable module stored on the hard drive . 
It was possible to rename c_20100.NLS file , reboot the machine and clean the registry . 
Alternative and even more reliable method was to reboot into Windows Safe Mode , clean the registry key and delete the c_20100.NLS file . 
This method was used by company 's System Administrators to find other modules that were not in c_20100.NLS . 
Since the infection was located and cleaned , the next step was to locate the breach used by the attackers to penetrate the network . 
Security Officers of the company suggested to start checking from a distinct host they have suspected . 
The host ( lets call it Machine # 3 ) belong to an employee without network administrators rights . 
It was known that it had connected to the attackers ' IPs like the server systems . 
The affected company 's security officers obtained a copy of the hard drive of the suspected machine and provided a remote access to the disk image . 
Browsing through the directory structure based on the suspected and adjacent dates of infection ( 01-06 September 2012 ) revealed a couple of suspicious files that could have been related to the attack : C : \RECYCLER\en.exe Type : PE file Created : 2012-09-06 04:08:53 UTC Size : 405504 MD5 : cf119a66d4c3e2355c1ec4ac316a7130 C : \WINDOWS\system32\drivers\tcprelay.sys Type : PE file ( native ) Created : 2012-09-05 17:27:04 UTC Size : 99912 MD5 : 0b105cd6ecdfe5724c7db52135aa47ef Preliminary analysis of tcprelay.sys proved that it was a malicious file which had another encrypted executable file embedded in it . 
This gave an even earlier suspected timestamp of infection : 2012-09-05 17:27:04 UTC or 2012-09-05 20:27:04 ( local system timezone , UTC+3 ) At the time of check there was no reference in the registry that was linked to tcprelay.sys , perhaps due the fact that system administrators had already cleaned the registry . 
This was confirmed by a file in local Administrator's Desktop folder : C : \Documents and Settings\Administrator\Desktop\1.reg ( created on 2012-09-24 12:44:07 UTC ) The file had an exported registry data , which had been removed from the registry during system cleanup on 24th September 2012 . 
Here is the original contents of the registry key ( HKLM\SYSTEM\CurrentControlSet\Services\tcprelay ) before it was removed : Once the infection on the machine was confirmed we started looking for the origins of the malicious files . 
From our previous experience of Winnti gang tactics , we knew that they are keen on sending targeted emails with attached executables . 
Security Officers helped us check all the emails stored in local Outlook database file on suspected dates of infection , however that did n't reveal anything suspicious . 
We have also found system event log files which were copied and analyzed . 
Event logs had records of tcprelay service start timestamps which confirmed the discovered date of infection . 
User SID corresponded to the local user account according to the registry . 
Tcprelay service first start time from the Event Log The Machine # 3 had an anti-virus program installed . 
Checking detection logs of the anti-virus on the suspected date of infection ( 05.09.2012 ) showed that there was a single detection right before tcprelay service first start . 
We recovered the PDF document called `` Transmission with Steps , Realited and Compressed.pdf '' from the anti- virus quarantine and prepared to find an exploit inside . 
The PDF had a lot of obfuscated JavaScript code inside , however we believe that it was not related to the original infection of the system . 
It was clean and the anti-virus detected it by mistake , probably because of some suspicious obfuscated JavaScript code . 
The JavaScript code inside the PDF was used to process an interactive form inside the PDF and support dynamic interactive 3D model embedded in the document using Adobe 3D technology . 
After that , we checked the infected machine 's browser history . 
The Internet Explorer history log files showed that the user was reading email right before the infection of his machine . 
With that in mind , we analyzed the Outlook local database again . 
This time we used several techniques to recover emails that were deleted from the Trash folder . 
This helped to partly recover a message which arrived on the day of infection . 
The text of the message supposed to contain an attachment , however the attachment and MIME headers of the email were completely lost and could n't be recovered . 
However , it was clear that the email was a targeted attack against the employee of the company . 
It was sent from companyxxyz @ 163.com and replaced `` From '' field in the email body which made it look like a legitimate email in the list of messages in Outlook . 
We discovered a Windows prefetch file in the system directory , that was created when the malicious attachment was opened . 
The timestamp correlates with the time of infection . 
C : \WINDOWS\Prefetch\CompanyXYZ EMPLOYEE SALARY ADJ-1AF9D56A.pf Time of creation : 2012-09-05 19:52:00 ( local timezone , UTC+03 ) Unfortunately , the prefetch file format is proprietary and there is nothing interesting in those files , except the original executable file name . 
Full path of the malicious executable that infected the first computer in the company was : C : \Documents and Settings\ < Username > \LocalSettings\Temp\RAR $ EX00.156\CompanyXYZ EMPLOYEE SALARY ADJUSTMENTS EBOOK.EXE According to the file path , this executable was a part of an archive , which was opened with WinRAR installed on the system . 
Upon discovery , we requested the Security Officers to provide us with full MIME as well as to check who else may have received the same message . 
The check discovered series of emails sent to several publicly known email addresses . 
In all cases the text message was the same as shown above , however sent from different mailboxes . 
The Return-Path MIME filed seemed to have the original email addresses of the attackers : companyxxyz @ 163.com company.xyz @ gmx.com The attackers used the same IP to send out emails : 118.142.11.114 inetnum : 118.140.0.0 - 118.143.255.255 netname : HGC descr : Hutchison Global Communications country : HK person : ITMM HGC nic-hdl : IH17-AP e-mail : hgcnetwork @ hgc.com.hk address : 9/F Low Block , address : Hutchison Telecom Tower , address : 99 Cheung Fai Rd , Tsing Yi , address : HONG KONG phone : +852-21229555 fax-no : +852-21239523 The emails we checked had the same attachment of 96782 bytes named `` Salary adjustments.zip '' . 
There was only one file inside ZIP archive , called `` CompanyXYZ Employee Salary Adjustments Ebook.exe '' . 
Full details about this application are provided further down in current report . 
To summarize , the targeted attack started from an email sent at 05.09.2012 19:12 ( UTC+03 ) . 
It resulted in system infection at 05.09.2012 19:52 ( UTC+03 ) . 
Size : 96782 MD5 : 1b56416fefa2d2c863f3b46dfb6dc353 Location : targeted attack email message attachment Creation time ( author 's timezone ) : 2012-09-05 14:29:10 This file is just a container for `` CompanyXYZ Employee Salary Adjustments Ebook.exe '' . 
Size : 122880 MD5 : 6ef66c2336b2b5aaa697c2d0ab2b66e2 Location : `` Salary adjustments.zip '' Creation time : unavailable Link time ( UTC ) : 2012-07-21 18:50:18 Internal name : FlashUpdate.EXE This application is a wrapper for another embedded executable modules . 
It serves as a dropper of malware . 
Notable fact : this application has a resource section inside and the default locale is set to Chinese Simplified . 
The file creates three long binary data registry keys , two of which are encrypted executable modules and one encrypted config from the body of the original dropper . 
These values are encrypted with simple 1-byte XOR . 
Sysinfo config module is used by sysbin01 . 
Apparently it starts with the company name and has three domain names , one of which is most likely used to check Internet connectivity ( update.microsoft.com ) . 
Sysbin01 module is a loader component . 
It creates several threads running various jobs . 
Sysbin01.thread # 1 attempts to load % TEMP % \ < ComputerName > .ax 
file and decrypts it . 
We checked the system but could n't find < ComputerName > .ax 
file in the Temp folder of the user , however we found other .ax-files 
that seemed to be related because of the date of file creation . 
File name : C : \Documents and Settings\ % User % \Local Settings\Temp\ % ComputerName % _p.ax File size : 2660 Creation time ( UTC ) : 2012-09-06 06:22:42 MD5 : unavailable ( the system went offline before we discovered the filepath ) . 
File name : C : \Documents and Settings\ % User % \Local Settings\Temp\uid.ax File size : 16 Creation time ( UTC ) : 2012-09-06 05:03:06 MD5 : unavailable ( the system went offline before we discovered the filepath ) . 
According to the code that loads < ComputerName > .ax 
it is an encrypted executable file , which is decrypted and loaded to memory by own loader routine in the sysbin01 module . 
Sysbin01.thread # 2 spawns a new instance of Sysbin01.thread # 3 every 10 seconds during , that is done 3 times . 
Sysbin01.thread # 3 This thread is the most important . 
It reads the configuration from the registry and connects to the C & C servers specified in the config via direct tcp connection or via proxy that is fetched from the the settings of locally logged in user profile . 
The config had the following C & C : tank.hja63.com . 
It sends a `` POST / < HEXNUMBER > '' request with User-Agent `` lynx '' , the data after HTTP header is just `` AA '' , expected answer is also `` AA '' . 
This thread also creates % TEMP % \uid.ax and stores current system unique ID , which is generated by CoCreateGuid system API ( 16 bytes ) . 
It is able to receive and save data from the C & C server to a file . 
It also monitors windows of explorer.exe and copies textual data from password fields if the user types in , stolen data is saved to a file first . 
After all threads are launched , the main thread waits for termination of Sysbin01.thread # 3 , which is created first and then exits . 
sysbin02 module behaviors depends on currently running processes . 
There is an embedded DLL file according to Figure 15 in sysbin02 . 
If the system has a running process named `` 360tray.exe '' , then the embedded file is stored in % SYSTEM % \MFC42LOC.DLL , then copies the source executable ( FlashUpdate.exe ) to % TEMP % \Flash.tmp and runs a new process from that location via WMI Win32_Process.Create method . 
If the system has a running process named `` bdagent.exe '' , then it copies the source executable ( FlashUpdate.exe ) to % TEMP % \Flash.tmp , decodes an embedded Base64 string and executes . 
The string has the following text after decoding : reg add `` HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run '' /v FlashUpdate /t REG_EXPAND_SZ /d `` '' '' '' % APPDATA % \FlashUpdate.exe '' '' '' -update activex '' /f The module also saves current module file path to the registry in the following key location : HKCU\Software\Classes\path Next it patches the tmp file with two dword `` AAAA '' values which looks like corruption of embedded encrypted sysbin modules inside . 
The meaning of this action is currently unclear . 
Then it moves Flash.tmp file to FlashUpdate.exe by and starts a new process from new location . 
Finally , if there is not `` qqpctray.exe '' process running , and this seemed to be the case for the analyzed system , it copies the source executable ( FlashUpdate.exe ) to % TEMP % \Flash.tmp , patches the new file and increases its size by adding system explorer.exe file contents to the resource section `` RC Data '' 20 times . 
The purpose of this is to make the new executable look like the real update service of Adobe Flash , it simply stuffs the file with executable code of another application . 
Then it moves the file to new location % APPDATA % \FlashUpdate.exe , saves new module file path to the registry in the following key location : HKCU\Software\Classes\path and starts a new process from there . 
Size : 15847156 MD5 : 5778178a1b259c3127b678a49cd23e53 Location : C : \WINDOWS\system32\c_20100.NLS Creation time ( UTC ) : unavailable Link time ( UTC ) : 2011-09-16 13:23:34 c_20100.NLS works in two modes . 
The first mode is a load as a dynamic library and the second is a launch as a service . 
Both branches have the same core functionality . 
This module is a universal executable code loader with no embedded payload . 
Its main purpose is to connect to the C & C server , download and store the encrypted payload in the system registry . 
It is also responsible for loading , decrypting and running the payload module from the registry after system restart . 
c_20100.NLS contains a ciphered block with initial settings . 
This ciphered block resides at the very end of the file of this malicious program and is decrypted in the beginning of execution . 
Structure of block : The malicious program XORs the magic number with a hardcoded value 0x19860609 , converts a resulted value into a HEX-string and uses that string as a key for RC4 cipher algorithm . 
In this case string-key represents `` 00000000 '' because of the magic number is equal to the hardcoded XORing value . 
With that key malicious program decrypts ( RC4 ) ciphered archive . 
The archive has the following data : Custom LZ-like compression algorithm resembling was used to pack initial settings . 
After unpacking the following data appears : The malicious program tries to read registry value `` SrvCode '' by registry path : HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion . 
That value is expected to contain ciphered with RC4 data . 
To decrypt it program uses 2nd integer of initial settings ( in this case 0x3514 ) XORed by hardcoded byte 0x12 . 
Result is converted into a HEX-string and is used as RC4 key for further decryption ( here it is `` 00003506 '' ) . 
That registry value appears if this malicious program had already worked on the system and received data from the C & C server in the past . 
Content of `` SrvCode '' poses a ciphered executable which should be loaded into the memory and run . 
If `` SrvCode '' is not found malware makes attempts to connect to one of the specified C & C servers . 
Initial settings define the type of C & C format . 
Byte at offset 0x24C stores the C & C type value : 0x00 : the malware uses 4 URL-based C & Cs placed at 0x4C , 0x8C , 0xCC and 0x10C offsets . 
By all appearances these are public resources ( forums , blog platforms and so on ) where the attackers leave messages with specially crafted content for a bot . 
If connection fails , the malware tries another approach . 
0x01 : the malware uses attackers ' hardcoded servers and connects to host and port specified at offsets : 0x14C , 0x18C , 0x1CC and 0x20C . 
If connection fails the malware tries another approach . 
If URL-based scheme is used then malware loads a web-page by specified in settings URL . 
The target text has to begin and end with special hardcoded delimiters : `` B9273C17 '' – start , `` B6A74634 '' – end . 
The malware reads contents of the webpages until it finds a proper page with delimiters . 
If found , the malware takes the text between delimiters and treats it as data of hex string , converts it to the binary data and decrypts resulted data using RC4 algorithm with hardcoded key `` rtyr_45_trf '' . 
For example : '' B9273C17E67024277AE02E2A8A780B243C0BCA88FE85A1B6A7463 '' , The data between delimiters : '' E67024277AE02E2A8A780B243C0BCA88FE85A1 '' , It is converted into binary : 0xe6 0x70 0x24 … 0xa1 and this buffer is decrypted with RC4 key `` rtyr_45_trf '' . 
Result is a host and port of C & C : `` nx2.intercpu.com:25 '' . 
If the host-port schema is used then malware simply connects to the hardcoded C & C servers directly . 
Once a working C & C server is found the malware sends specially crafted ciphered buffer to via TCP/IP . 
On request from a bot a C & C server replies with several blocks of data described below : 1st block 0xC bytes of header : 0x1000010 , 0x1000010 , < reserved 4 bytes > . 
2nd block 0x1C bytes ( due to absence of real respond from the C & C I 'm presenting an example buffer of this block containing bytes 0x00 , 0x11 , 0x22 , … , 0xFF , 0x00 , 0x0 , 0x0 , … , 0x00 ) : First DWORD of this buffer ( here , 0x33221100 ) is a magic number which is XORed with the value 0x1986052 . 
Resulted lowest byte is used to XOR unpacked data . 
Word at offset 0x4 ( here , 0x5544 ) poses a checksum of unpacked data which should correspond with actual received content . 
DWORD starting at offset 0x8 ( here , 0xBBAA9988 ) represents a size of unpacked data . 
Value at marked place at 0xC offset ( in example picture it is dword 0xFFEEDDCC ) represents a size of next block of data to be received . 
That data will pose an archive , hence this value represents a size of packed data . 
3rd block The 3rd block poses an archive of ciphered data . 
Being received , unpacked and decrypted , data is ciphered again with RC4 and stored into `` SrvCode '' value of registry by mentioned above registry path . 
The eceived data is processed as an executable file to run . 
The malware places the executable in memory , prepares for running and makes call to the entry point of the new code . 
Then it waits when following event will be triggered : Global\D5ACF9F6-C8B3-47d1-9768-57162E1F5FDB When triggered , the malware finishes execution . 
During the process of finishing it deletes registry value `` SrvCode '' along with values `` DrvCode '' and `` KeyCode '' from the same registry path although this malware was not creating them . 
Size : 99912 MD5 : 0b105cd6ecdfe5724c7db52135aa47ef Location : C : \WINDOWS\system32\drivers\tcprelay.sys Creation time ( UTC ) : 2012-09-05 17:27:04 Link time ( UTC ) : 2011-12-21 13:55:03 This file is a Microsoft Windows native application , which is loaded as a driver and had a valid digital signature in 2012 . 
The certificate was issued by LivePlex Corp , which can be found online by searching for the company name . 
One of their webpages is here : http : //www.linkedin.com/company/liveplex When the driver is loaded it decrypts an embedded DLL file , which is immediately injected into the address space of services.exe process . 
Then the driver sets up some rootkit functionality to hide TCP connections by patching the system tcp/ip driver . 
The injected DLL was called s.dll at the time of compilation and is yet another module for analysis . 
Size : 77825 MD5 : 1716889fcee461e7cde5128c14d206cb Location : inside tcprelay.sys Creation time ( UTC ) : 2012-09-05 17:27:04 Link time ( UTC ) : 2011-03-01 09:07:12 This opens system event named `` 401d-b49a-93cf7a18e5b3 '' and sets event to fired state if it exists . 
The code checks for proxy server configuration by impersonating a logged in user and fetching settings from the registry . 
It can work both with Socks and HTTP proxies . 
The module attempts to connect to the list of 8 domains , consisting of the following command and control servers ( some of them are used more than once ) : a1.googletrait.com a1.nexongame.net a1.reegame.net mail.nexongame.net It automatically looks for open C & C ports in the following order 53,443,8080,25,80,3690,1433,80 . 
During connection over HTTP proxy it uses the following User-Agent string : `` MyApp/0 '' . 
The application is linked with libmysql.dll and Zlib ( v.1.2.3 ) . 
Current Zlib version is 1.2.7 and was released on 2nd May 2012 , while version 1.2.3 seems to be released in July 2005 . 
Zlib version 1.2.4 was released on March 2010 , so the original module was probably designed somewhere after July 2005 and before March 2010 . 
Then it collects system information , which includes the following : Host name OS Service Pack version System default language ID and Code page List of local drives with free space Internal hardcoded identifier ( `` 12-21 '' ) Process commandline Logged in user name System directory path Amount of free system memory CPU name Terminal services port number The information is stored in a buffer that begins with hardcoded header magic number : 0xDF1F1ED3 . 
The block is compressed using Zlib ( v.1.2.3 ) compress2 method with compression level 8 . 
The data is compressed later and prepended by a 4-bytes header as shown below . 
After submitting system information the module expects 4 byte response code from the server after which it sends one 00 byte to complete the handshake procedure . 
Then the module expects an interactive communication session with the remote operator . 
It provides capability to run various commands including ( command names were defined during reverse engineering ) : process_list kill_process dir_list smbshare_list smbshare_mount dir_make file_delete file_move file_upload file_open file_write file_close file_find url_download_to_file process_start process_start_and_get_output dll_load dll_call_export screen_getsnapshot screen_set_cursor_position screen_send_input tcpproxy_open_connection tcpproxy_close_connection mysql_connect mysql_fetch mysql_disconnect driver_tcpreplay_interact tcpsession_close quit A command output is compressed using Zlib and sent to the server in asynchronous mode . 
To summarize , it is obvious that this executable module is a backdoor , capable of taking screenshots , stealing files , downloading new files from the Internet , starting and killing processes , including interactive Windows shell commands , file search and interaction with mysql database server . 
Size : 405504 MD5 : cf119a66d4c3e2355c1ec4ac316a7130 Location : C : \RECYCLER\en.exe Creation time ( UTC ) : 2012-09-06 04:08:53 Link time ( UTC ) : 2009-11-17 16:02:04 This application is a dropper , it fetches a resource called EXEFILE from current application and saves it into following paths : < CURRENT DIR > \dllcache\sethc.exe C : \WINDOWS\system32\sethc.exe Then the module uses undocumented Windows API from SFC_OS.dll , a function called SfcFileException to update the system version of C : \WINDOWS\system32\sethc.exe . 
The file C : \WINDOWS\system32\sethc.exe ( SET High Contrast ) is to enable the High Contrast accessibility feature in order to allow people with visual impairments to log in . 
SETHC is activated at logon screen with LeftAlt+LeftShift+PrintScreen key combination . 
By replacing C : \Windows\SYSTEM32\SETHC.EXE with a custom application an attacker can run an arbitrary application with SYSTEM privileges running in zero session ( in separate desktop space from normal applications ) . 
After the new file replaced the system sethc.exe application , current module adjusts the privileges of sethc.exe to disable access to the file from any other application . 
This is achieved by calling external system tools cacls . 
Replace access rights to the files , allow everyone full access : cacls C : \WINDOWS\system32\sethc.exe /c /e /p everyone : f cacls < CURRENT DIR > \dllcache\sethc.exe /c /e /p everyone : f Revoke access to the file for everyone , leave only system readonly access : cacls C : \WINDOWS\system32\sethc.exe /t /c /e /r everyone cacls C : \WINDOWS\system32\sethc.exe /t /c /e /r administrators cacls C : \WINDOWS\system32\sethc.exe /t /c /e /r users cacls C : \WINDOWS\system32\sethc.exe /t /c /e /r system cacls C : \WINDOWS\system32\sethc.exe /t /c /e /r `` Power Users '' cacls C : \WINDOWS\system32\sethc.exe /c /e /p system : r The dropper also changes the file timestamp . 
It is set identical to C : \WINDOWS\system32\ntvdm.exe . 
The dropper application has a resource section with Menu , Dialog templates and other information put by the MS Visual Studio Application Wizard . 
It includes default system locale from the developer 's system , which is Chinese Simplified . 
The dropped application ( from resource EXEFILE ) is described below as sethc.exe . 
Size : 20480 MD5 : 3ba06424e8244f17a8d269c4d40c39c9 Location : resource section of En.exe Link time ( UTC ) : 2009-05-16 07:09:35 This small file has very basic functionality . 
It is written using MS Visual C++ with MFC and is used to render a simple dialog window . 
Like En.exe it has resource section , describing the dialog window and default locale is set to Chinese Simplified . 
Once it replaced local system sethc.exe tool it can be invoked when the desktop is locked with LeftCtrl+LeftShift+PrintScr key combination . 
This brings a dialog Window similar to system StickyKeys application . 
However , if you press Ctrl+Alt+F you will immediately see a hidden input box . 
If you enter `` ydteam '' in the input box and press Ctrl+Alt+K , the application will welcome you with a message box and will execute a TaskManager . 
As far as sethc.exe is executed with privileges of local system , the task manager also inherits these privileges and is capable of killing any other process as well as starting any other application with system rights . 
Apparently , this is a backdoor to the system . 
An attacker can run cmd.exe , add local users with administrative privileges and log in . 
We checked if the tool was publicly shared on the Internet , but could n't find a page distributing it freely . 
That is why we assume that it is developed and used privately . 
Below is full list of all collected domains and IP-addresses of C & C servers have they been mentioned in initial settings of c_20100.nls or hidden in text messages at public places in Internet : C & Cs from public resources : 27.115.103.198:8885 27.115.103.195:8885 114.222.36.32:10000 27.115.103.195:23456 27.115.103.195:10000 nx2.joymax.in:80 nx3.joymax.in:80 nx2.intercpu.com:25 ( 174.36.138.30 ) nx3.intercpu.com:25 ( 174.36.138.30 ) nx3.interdriver.net:53 ( 119.240.212.110 ) stan227.guicp.net:8008 Hardcoded C & C from the malware : service.interdriver.net:443 ( 98.126.218.64 , 199.188.106.231 ) service.googlefiles.net:53 ( 98.126.218.64 , 199.188.106.231 ) service.dell-support.org:25 service.hp-supports.com:80 tank.hja63.com a1.googletrait.com a1.nexongame.net a1.reegame.net mail.nexongame.net Interestingly , there is an overlap of C & Cs from public resources and hardcoded domains : nx3.interdriver.net:53 < === > service.interdriver.net:443 The nx3.interdriver.net was published by awertasegfae @ yahoo.com and was discovered at http : //awertasegfae.blogspot.ru/2011/10/first-test.html . 
This means that at least the individual who owns awertasegfae @ yahoo.com for sure belongs to the same gang who attacked CompanyXYZ . 
So , who is behind Winnti ? While analyzing the malicious files that we detected during our investigations we found some details which may cast some light on the source of the attacks . 
As part of our investigation , we monitored exactly what the cybercriminals did on an infected PC . 
In particular , they downloaded an auxiliary program ff._exe to the Config.Msi folder on the infected machine . 
This code searches for HTML , MS Excel , MS Word , Adobe , PowerPoint and MS Works documents and text files ( .txt 
) on the hard drive . 
Debugging lines were found in ff._exe_ that possibly point to the nationality of the cybercriminals . 
They were not immediately noticeable because they looked like this in the editor : However , during a detailed analysis it emerged that the text is in Chinese Simplified GBK coding . 
This is what these lines look in Chinese : Below is a machine translation of this text into English : In addition , cybercriminals used the AheadLib program to create malicious libraries ( for details , see the second part of the article ) . 
This is a program with a Chinese interface . 
Chinese text was also found in one of the components of the malicious program CmdPlus.dll plug-in : It would appear that the attackers can at least speak Chinese . 
However , not everything is so clear cut : because the file transfer plug-in has not been implemented entirely safely , a command which includes the attackers ' local path ( where the file comes from and where it is saved to ) arrives during the process of downloading/uploading files on the infected system . 
While monitoring the cybercriminals ' activity on the infected machine , we noticed they uploaded the certificate they found in the infected system , and the network traffic reflected the local path indicating the place where they saved the file on their computer : These characters appear to be Korean , meaning `` desktop '' . 
This means the attackers were working on a Korean Windows operating system . 
Therefore , we can presume that the attack is not exclusively the work of Chinese- speaking cybercriminals . 
Locating the attacker is one of the most non-trivial parts of the research . 
The attackers normally do not leave any traces in the malware that can be directly bound to their real identities . 
That is why we have to use all available bits of information that seems to find other unique related content on the Internet or any other available data sources . 
One of the important stages is to extract unique identifiers/nicknames/tags that can be discovered on the Internet and after that find individuals who are related to creation or distribution of this content . 
The string `` ydteam '' looked non-random and we decided to check it on the Internet . 
It turned out that YDteam is a hackers group name and has a lot of references on Chinese segment of the Internet : There was a website ydteam.cn that seems to be related to the activity of the group . 
According to the domaintools.com database , it was registered on 2009-10-06 15:12 and put on hold around 2010-10-08 . 
The original WHOIS information from domaintools.com : Registrant name 魏楠 ( Wei Nan ) seems to be represented in the mailbox wn6805 @ 126.com , which could mean the owner of the website used real identity . 
The domain was most likely registered by the team leader . 
The email itself was used on several other websites . 
For example The webpage above has a post offering to `` help with cheap shopping online '' . 
That is most likely related to a fraudulent activity of the email owner ( stolen Internet-banking credentials or credit card information ) . 
The same page reveals a QQ id of that individual and a username : Another page http : //www.gtvod.com/gtvod/jsp/public/personal/index.jsp ? id=20100127213936126005 shows information about the user registered with name `` wn3118 '' and the same email : Another page http : //tieba.baidu.com/p/652667782 has a message from profile `` 灬low-key , wn '' ( which links to wn6805 @ 126.com ) . 
Profile information reveals gender of the individual : There are few essays in Chinese probably written by the individual owning wn6805 @ 126.com while studying at Junior High School : A page from zww.cn also shows some details about the author : http : //www.zww.cn/zw/myzw.asp ? u= % CA % A7 % C8 % A5 % B0 % AE Searching for the QQ id 251985076 brings to http : //blog.sina.com.cn/dahuadl that has User mobile number : 13847416805 The hackers team also seemed to own ydteam.com for some time according to reference at http : //zzsky.5d6d.net/archiver/tid-127.html Domaintools.com shows that the domain was registered to a Chinese individual from 2009-06-03 to 2011-08-22 . 
After that WHOIS information was protected by a Privacy protection service . 
Here is WHOIS data at the time of domain registration : Please note , that +8613652452428 is a Chinese local cell phone number . 
Domaintools.com has also preserved a screenshot of the website while it was online on 2010-02-25 . 
It shows some of the team member names mentioned above . 
Another trace to the source of attack is based on email sender IP address . 
The emails were sent from 118.142.11.114 . 
According to robtex.com , there are 2 domain names that share this IP : Pad62.com was created in 2011-06-05 , on the date of registration if had non-protected WHOIS information , according to domaintools.com : We checked which other domains are associated with the WHOIS information above and found the following domain names : One more route is to check the C & C of the initial dropper/downloader module . 
This was tank.hja63.com . 
Acccording to domain tools , hja63.com had non-protected WHOIS information in 2011 : When we checked , tank.hja63.com resolved to 173.234.184.45 ( owned by DiaHosting Limited , USA ) , while hja63.com resolved to 68.178.232.100 ( GoDaddy ISP server ) . 
Analysis of the file c_20100.nls revealed additional information leading to probable attackers . 
Looking for identifiers ( used as message boundaries , or delimiters ) B9273C17 and B6A74634 specified in this malicious file on Internet we found the following pages where the attackers left messages for the bots : Another place of just mentioned forum thread : Here , we see these emails used as commenters ' identifiers : Jimycoco… @ gmail.com awertase ... 
@ yahoo.com Jimycoco… @ gmail.com most probably refers to Jimycocowell which is a username that pops up further . 
Searching for `` awertase '' brought another forum thread where ciphered data for the same bot appeared : http : //osdir.com/ml/openmeetings-dev/2011-09/msg00364.html The full email behind awertase ... 
@ xxxxxxxx seems to be awertasegfae @ yahoo.com according to http : //awertasegfae.blogspot.ru/2011/10/first-test.html http : //hi.baidu.com/alonecode/item/6936f85a3d98ce3533e0a9ed According to Figure 32 , `` mer4en7y '' and `` alonecode '' ( from the URL of the page ) are nicknames which are related to the user of the Baidu blog platform where messages for a bot were left . 
Google Search for the nickname '' mer4en7y '' returned 5490 results . 
This is a very active user that posts messages for this type of bot . 
The first results lead to hacker forums and IT-security specific web-platforms . 
The same nickname has appeared on a well- known Romanian Security Team forum . 
According to the following , Mer4en7y submitted a vulnerability found in Weihai City Commercial Bank system : http : //wooyun.org/bugs/wooyun-2010-011002 Favorite videos and tutorials of Mer4en7y : http : //www.tdcqjslt.com/u.php ? uid=1918 Mer4en7y 's micro-blogging page at t.qq.com : http : //t.qq.com/mer4en7y Alias of that profile is translated as `` watching a rain '' . 
A user with nickname `` d4nr4n '' ( http : //t.qq.com/d4nr4n ) is posting a message where mer4en7y is mentioned : Google translation : `` % mentioned individuals % go to Nanjing tomorrow xx training institutions to maintain four months … C++ learning , seeking Nanjing-based friends of the exchange '' Mer4en7y at yoyo2008.com : http : //www.yoyo2008.com/home.php ? mod=space & uid=41498 Mer4en7y profile at yoyo2008.com One of two friends of Mer4en7y in yoyo2008 social network is a user named `` mayuan '' which seems to be from Xinjiang and a graduate of Judicial Police School according to shared private information out there : http : //u.pintour.com/uid-b1bf56e230cc42d9bfa003a7718888d2/ Mer4en7y 's exploit has been involved in the penetration of public radio service ftp server ( according to WHOIS information this domain belongs to Xi'an Municipal Bureau of Radio and Television ) . 
As we can see here Mer4en7y had an email address associated with 90sec hackers team . 
Another reference on the net shows that Mer4en7y is after sourcecode of proprietary products ( probably udf.dll from Roxio Inc ) : http : //www.uedbox.com/udf-dll-source/ The following confirms that Mer4en7y is a member of 90sec group . 
The group website is located at http : //www.90sec.org/ : Mer4en7y replies on job offer posted at 90sec forum ( someone wanted to hire computer exerts with very special knowledge ) : https : //forum.90sec.org/viewthread.php ? action=printable & tid=2012 Rough translation of job offer from Chinese : '' Subject : Looking for information security researcher From : Southland sword Time : 2012-04-06 00:38 Subject : Security researcher job Responsibilities : 1 . 
Full target penetration alone or with a team depending on available resources ; 2 . 
Penetration testing report and recommendations Technical requirements : 1 . 
Knowledge of penetration testing , methods , processes , proficiency in a variety of penetration testing tools ; 2 . 
Knowledge of common Web development languages ( asp , php , jsp ) , experience with SQL-injection , XSS , common websecurity exploits and patches ; 3 . 
Experience with all kinds of operating systems and databases for common security vulnerabilities ; 4 . 
Good verbal and written language skills ; 5 . 
Be able to work in a team ; individuals who lose trust , do not listen to the teamleader and not accepting the rules will be kicked out ; Work Location : Guangdong ( OR Guangzhou Shenzhen ) Baochibaozhu package , Relatively free playing time . 
Salary : monthly allocation of the total amount of work and cooperation share more than 1W . 
Vacancies : 5 people For candidates : first contact me ( preferably work resume ) , after my check the resume will be passed to the head coordinator for arranging a personal meeting . 
Salary : free meal and apartments , office location is in a senior villa suite of 200 square meters , computers are available but please bring your own hard drive with environment and tools you are familiar with . 
Even a single completed project will provide you with money for your monthly expenses . 
Powerful background . 
No comments ! Tho who are competent , please contact : Email : Infosec @ cntv.cn QQ : admin @ inessus.com '' And Mer4en7y 's replied to this job offer : Which can be translated as : `` Are n't you recruiting people for APT ? Guangzhou is too far , but anyway I support it '' . 
There are some interesting comments in the mentioned forum thread regarding reference `` Powerful background '' in job offer . 
People in the thread speculated that it could mean the work is supported by the government . 
Mer4en7y is publishing an exploit : http : //www.hackqing.com/index.asp ? FoxNews=129.html Mer4en7y published a modified Perl script for network scan : http : //www.2cto.com/kf/201110/109200.html Let 's continue with other places where delimiters have been found : https : //www.myspace.com/574064782/blog http : //www.wuhanbike.net/home.php ? mod=space & uid=15845 & do=profile http : //jimycocowell.blogspot.ru/ The attacker left two messages . 
The very first one is labeled as `` first home '' / `` first love '' and contains a ciphered C & C domain as described above , i.e . 
C & C domain is encrypted with RC4 algorithm and its hex binary value is presented in text format between delimiters . 
But the next message dubbed `` second '' contains a ciphered C & C domain too but it is encoded in another way : The initial C & C domain is XORed with fixed byte value and the resulted data is transformed using BASE64 encoding . 
The resulted text is inserted between the same delimiters . 
By all appearances this method is used in the next version of the backdoor which is the subject of current research ( see c_20100.NLS ) . 
It is also possible that programs with support of either this or that encryption could be used simultaneously in the frame of one attack . 
Between all found messages for the bot the second type of messages ( BASE64 ) is significantly prevalent . 
A link to this `` Jimycocowell home '' is also present at following place of `` bitgodgod '' user : http : //www.blogger.com/profile/06442609461818597659 We have located one sample of Winnti malware with a hardcoded C & C : mail.7niu.com . 
Domaintools information about the domain : Domain Name : 7niu.com PunnyCode : 7niu.com Creation Date : 2006-06-11 00:00:00 Updated Date : 2012-01-27 21:35:57 Expiration Date : 2016-06-11 00:00:00 Registrant : Organization : qi tou niu Name : xibei jiao Address : beijing City : beijing Province/State : Beijing Country : CN Postal Code : 100000 Administrative Contact : Name : xibei jiao Organization : qi tou niu Address : beijing City : beijing Province/State : Beijing Country : beijing Postal Code : 100000 Phone Number : 86 -- 1321333333 Fax : 86 -- 010555555 Email : bit_bugbug @ tom.com Technical Contact : Name : xibei jiao Organization : qi tou niu Address : beijing City : beijing Province/State : Beijing Country : CN Postal Code : 100000 Phone Number : 86 -- 1321333333 Fax : 86 -- 010555555 Email : rain @ etang.com You can see how similar `` bitbugbug '' and `` bitgodgod '' . 
Both are directly related to Winnti activity . 
The email address `` bit_bugbug @ tom.com '' also can be found on Chinese websites about home rentals : http : //oldhouse.0379home.com/RentView-1108.html We have located another individual calling himself Yang . 
He distributed bot control commands and was quite active on the internet as well . 
http : //yang8559420.blog.163.com/ Search for `` yang8559420 '' brought some results : Yang is a distributor of resources ( maps or programs ) for applications based on ArcGIS Engine ( http : //www.esri.com/software/arcgis/arcgisengine ) http : //shop65775432.taobao.com/ ? spm=a1z0b.7.2-2442034955.3.rfLsIS Information about the seller : http : //shop65775432.taobao.com/view_page-74445421.htm Yang is certified at alipay.com ( see field `` Certification '' above ) : http : //help.alipay.com/lab/help_detail.htm ? help_id=211779 Yang left some feedback about a coat : http : //www.yifa8.com/4/766/770/763311.html Yang is selling glasses : http : //webcache.googleusercontent.com/search ? q=cache : susBSuR_5zoJ : re.taobao.com/search % 3Frefpid % 3Dmm_ 16823808_2252954_8791633 % 26keyword % 3D % 2525D5 % 2525E6 % 2525CB % 2525BF % 252520 % 2525C1 % 2525AC % 2525D2 % 2525C2 % 2525C8 % 2525B9 % 252520 % 2525C7 % 2525E5 % 2525B2 % 2525D6 % 26back % 3Dlo1 % 25253D0 % 252 526lo2 % 25253D0 % 252526nt % 25253D1 % 26isinner % 3D1 % 26yp4p_page % 3D3 % 26posid % 3D7+ % 22yang8559420 % 2 2 & cd=14 & hl=ru & ct=clnk & gl=ru http : //bbs.iaixue.com/home.php ? mod=space & uid=217 & do=profile User : lovemeyang ( probably related to Yang ) . 
Signature is a message for a bot : So , both Yang8559420 and Lovemeyang messages go with signature : http : //bbs.iaixue.com/forum.php ? mod=viewthread & tid=261 http : //bbs.iaixue.com/forum.php ? mod=viewthread & tid=612 … Search for `` lovemeyang '' returned too much data , making it difficult tofilter out those identifying possible attackers – false positives are highly-probable . 
However , it 's worth mentioning that the following link refers to an account with the `` lovemeyang '' username and the user has earlier posted blogs relating to IT-security , so possibly the user is that Yang who is involved in the attack : http : //lovemeyang.blog.51cto.com/659880/195451 Our research revealed long-term oriented large scale cyber-espionage campaign of a criminal group with Chinese origins . 
These attacks are not new , many other security researchers have published details of various cybercriminal groups coming from China . 
However , the current hacking group has distinguishable features that make it stand out among others : - Massive abuse of digital signatures ; the attackers used digital signatures of one victim company to attack other companies and steal more digital certificates ; - Usage of kernel level 64-bit signed rootkit ; - Abusing great variety of public Internet resources to store control commands for the malware in an encrypted form ; - Sharing/selling stolen certificates to other groups that had different objectives ( attacks against Uyghur and Tibetan activists ) ; - Stealing source code and other intellectual property of software developers in online gaming industry . 
The Winnti hacking group is not the first and not the last . 
By making our research paper available to the public , we hope that it will not only spread the knowledge among security researchers but also will help system administrators and security officials in all type of organizations around the world to learn the tactics and tools of the perpetrators . 
We hope that our shared knowledge will help to better protect IT infrastructure . 
We also hope that our message will reach Chinese law enforcement agencies . 
If the current research is not enough to initiate criminal investigation , we hope that it will be enough at least to make some checks and probably prevent other malicious activity from reaching out foreign countries and business within China . 
