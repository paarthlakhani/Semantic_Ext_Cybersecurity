TLP : WHITE In this document we report on our analysis of CosmicDuke - the first malware seen to include code from both the notorious MiniDuke APT trojan and another longstanding threat , the information- stealing Cosmu family . 
When active on an infected machine , CosmicDuke will search for and harvest login details from a range of programs and forward the data to remote servers , some of which were active at the time of writing . 
F-SECURE LABS SECURITY RESPONSE Malware Analysis Whitepaper In early 2013 , the MiniDuke malware was discovered in use in a series of attacks against NATO and European government agencies . 
While investigating MiniDuke loaders in April 2014 , we were surprised to notice that the malicious executable being decompressed and loaded into memory was very similar to the Cosmu family of information-stealers , which we saw as long ago as 2001 . 
Cosmu is the first malware family we have seen to share code with MiniDuke . 
This analysis is focused on those Cosmu samples that share code with MiniDuke . 
Some of these are older than the oldest publicly documented MiniDuke samples , implying that the shared code might have been originally used by Cosmu , not MiniDuke . 
For convenience , we decided to name the samples showing this amalgamation of MiniDuke-derived loader and Cosmu-derived payload CosmicDuke . 
The filenames and content used in CosmicDuke 's attack files to lure victims into opening them contain references to the countries of Ukraine , Poland , Turkey and Russia , either generally in use of language or included detail , or in allusions to events or institutions . 
The filenames and content chosen seem to be tailored to their target 's interests , though at the time of writing , we have no further information on the identity or location of these victims . 
CosmicDuke infections start by tricking victims into opening either a PDF file that contains an exploit or a Windows executable whose filename is manipulated to make it look like a document or image file . 
Once the victim opens the file , the malware gains persistence on the system and starts collecting information . 
The data collection components include a keylogger , clipboard stealer , screenshotter , and password stealers for a variety of popular chat , email and web browsing programs . 
It also collects information about the files on the system , and has the capability to export cryptographic certificates and the associated private keys . 
Once the information has been collected , it is sent out to remote servers via FTP . 
In addition to stealing information from the system , Cosmu allows the attacker to download and execute other malware on the system . 
F-Secure has detections for all the different malicious components used by the Cosmu variants described in this report . 
We have seen dozens of Cosmu samples that share code with MiniDuke . 
Rather than cover the entire spectrum of samples , the scope of this analysis was intentionally limited to highlighting the most interesting of the recent samples . 
This includes examining the attack files used to infect targets , the remote servers storing data collected from the victims and the differences between the MiniDuke loaders and Cosmu info-stealers used in the samples . 
This analysis is based on examination of files we gathered through our sample collection systems . 
Based on the nature of the filenames and decoy documents used , and the fact that the MiniDuke loader is known to be used as a part of targeted attacks , we suspect that CosmicDuke may also be used in such operations . 
At the time of writing , we have not identified any victims ourselves , nor are we aware of any public reports confirming this scenario . 
At this time , we have no information on how the CosmicDuke attack files are delivered to the victims , though based on the findings from the analysis , we can make an educated guess . 
It is possible that the PDF documents containing exploits were emailed to the targeted users as file attachments . 
Assuming that the email gateway used by the victims does not include an antivirus solution capable of identifying the exploit , such files would have little impediment to being spread by email . 
It is however unlikely that the samples which camouflaged the executable files as image or document files would be distributed in the same way . 
Regardless of any tricks played with the filenames , the files themselves are Windows executables , and many email solutions today prevent users from opening attached executable files . 
The attackers are using at least two different methods for infecting the systems : exploits and social engineering . 
CosmicDuke malware samples that use exploits to gain entry onto a target system ( referred to as exploit files in the rest of this document ) start with a malicious Flash object embedded into a PDF file . 
When the file is launched , the object exploits the known CVE-2011-0611 vulnerability in specific versions of Adobe Flash , Reader and Acrobat products . 
Unlike the CosmicDuke files geared towards social engineering , the exploit files do not actually display any documents to the user as a form of distraction ; the malware simply straightaway exploits the vulnerability . 
Less technically challenging CosmicDuke samples use simple social engineering to trick the user into willingly launching the attack file . 
Once launched , the file drops the malware onto the system ( such files are therefore referred to as droppers in the rest of this documents ) . 
To do so , the malware 's executable file is first disguised as an image or document to make it seem innocuous . 
When launched , a document or image is displayed in order to draw the user 's attention away from any background activity . 
In the meantime , the malware 's malicious files are silently installed and executed on the system . 
CosmicDuke 's primary purpose is to steal information . 
The different ways it collects information from the infected machine are as follows : yy Keylogger yy Taking screenshots yy Stealing data from clipboard yy Stealing files yy Stealing PKI certificates and associated private keys yy Stealing usernames and passwords from browsers , instant messengers and email clients yy Stealing WLAN passwords yy Stealing Windows password hashes The information collected by the malware is automatically uploaded to remote servers via FTP . 
Our analysis also reveals various details of the remote sites contacted by CosmicDuke , including the login credentials used and the FTP folder structure . 
At the time of writing , most of these remote sites are live . 
A list of the servers CosmicDuke malware connects to is on page 15 . 
CosmicDuke samples can be divided into 3 distinct groups based on similarities between the C & C servers they contact , file characteristics and decoy document used . 
The full details of how the samples were grouped is listed on page 11 ; Figure 2 at left provides a quick summary of the grouping as they relate to how CosmicDuke is delivered , and the decoy documents shown . 
The first group of samples ( Group # 1 ) is spread using 3 dropper files that display specific decoy documents . 
The second sample group ( Group # 2 ) uses both exploit-loaded files and dropper files . 
The third group ( Group # 3 ) is rather an exception , as it does not use the droppers or exploits listed here ; for the sake of simplicity , we will exclude considering Group # 3 's delivery method . 
CosmicDuke 's author ( s ) disguised the fact that the malware is an executable file by using the Right-to-Left Override ( RLO ) feature in Windows to hide the file's correct file extension , .exe 
or .scr 
, and replace it with .jpg 
, .pdf 
or .doc 
, in order to make the file appear to be an innocuous document or image . 
Image 1 is a screenshot of how the filenames look like in Windows 7 . 
The real file extension for the top four files is .scr 
, while the real extension for the bottom one is .exe 
. 
Note that the attacker has also carefully changed the icon of the executable to reflect the fake filetype for the first four . 
The bottom file is a curious exception , as it does not use a PDF icon as would be expected with a .pdf 
file extension ; instead , it uses an NVIDIA icon , most likely to reflect the fact that the product name of the executable is listed as `` NVIDIA Update Components '' in the file 's version information . 
This seems to be a common fake product name used in the latest Cosmu samples . 
Meanwhile , the filename readily visible to the users is translated from Turkish as `` civilian crisis center status report '' . 
The use of RLO is a smart move from the attackers . 
Why go through the trouble of exploiting anything if you can simply trick the user into double-clicking an executable that looks a lot like a document file ? As the screenshot demonstrates , unchecking `` Hide extensions for known filetypes '' does not help . 
The three- letter file extensions seen at the end of the filename is not the real file extension . 
Even though the information in the Type column is correct , most of the users probably do not even check it . 
DROPPER : DECOYS CosmicDuke dropper files all display some kind of a decoy document or image to distract the user when the attack file is launched . 
The following are the droppers used by Group # 1 . 
Here are the filenames of the decoys , as displayed in Windows , and the decoy images or files they show when launched : yy rcs.Заказ.doc - Image 2 yy rcs.18.jpg - Image 3 yy rcs.DSC_1365527283.jpg - Image 4 The decoys are interesting . 
Заказ means `` order '' in Russian . 
Based on the characters СЖС-1295 and ГХРП found in the decoy , the document looks like an order for growth hormones . 
The document contains full delivery address , including the name of the person placing the order . 
An interesting detail about the image file of a receipt ( Image 3 ) shown by rcs.18.jpg is that it contains EXIF metadata , including the date when the photo was taken and the model of the mobile phone that was used to take the photo . 
Part of this EXIF metadata is shown in Image 3a . 
The third dropper file we 've seen uses the filename 'rcs . 
Ukraine-Gas-Pipelines-Security-Report-March-2014.pdf ' , and displays the decoy document shown in Image 6 . 
This particular dropper file is notable in that its info-stealer ( SHA1 : f513b21738ae3083d79e4fa1039889e1c3efff58 ) is the same one used by the exploit file named `` Bulletin-PISM- No-31- ( 625 ) -March-10-2014.pdf '' . 
The code used by CosmicDuke to exploit the CVE-2011- 0611 vulnerability appears to be derived from this proof- of-concept code that was made available in early 2011 : yy http : //www.exploit-db.com/exploits/17473/ The samples we analyzed of the exploit-based CosmicDuke variety had the file names and SHA1 values listed in Figure 3 at right ( see `` Appendix A | Samples '' for more details ) . 
Some of these exploit files have interesting filenames , such as `` dip.mail march.pdf '' and `` Bulletin-PISM-No- 31- ( 625 ) -March-10-2014.pdf '' . 
The PISM mentioned in the latter presumably refers to the Polish Institute of International Affairs . 
The CosmicDuke samples we analyzed used the same loader as MiniDuke 's stage 3 samples , making this the first occasion in which we 've seen other malware using this particular loader . 
The parallel usage of the loader in the CosmicDuke and MiniDuke families is interesting . 
The oldest samples we have of this loader that loads Cosmu malware show the compilation date of the loader as March 24 2011 , which predates the oldest publicly documented MiniDuke sample ( with a recorded loader compilation date of June 18 2012 ) . 
The earlier use of the loader with a Cosmu payload leads us to suspect the existence of a link between the author ( s ) of Cosmu and MiniDuke . 
The most common compilation date seen for the loaders that load the Cosmu malware is November 13 2012 . 
Perhaps coincidentally , we found one MiniDuke sample ( originally reported by CrySys ) that also shows the same compilation date . 
In this case however , the MiniDuke component is actually a downloader ; it connects to an IP address in Turkey , and when it receives a response , decrypts and executes it . 
Also of interest is that once the MiniDuke loader was updated , we saw CosmicDuke samples take the updated loader into use in mid-April 1 2014 , a few months after MiniDuke started using the latest loader in mid-December 2013 . 
It seems possible that the actors behind the two malware families share code and/or tools . 
The Cosmu info-stealer is the main component of the CosmicDuke malware . 
The technical description of the info-stealer is based on analysis of the following sample : SHA1 : b072577447cdf3936d95e612057e510dd3435963 . 
Cosmu has a couple of different mechanisms for achieving persistence on the system . 
It creates a scheduled task and installs a Windows service . 
The scheduled task is typically named `` Watchmon Service '' . 
It executes the malware at system startup . 
The service typically has name javamtsup , and the display name is `` Java ( TM ) Virtual Machine Support Service '' . 
The size of the service binary on disk varies , but typically the real size is 5120 bytes ( based on PE headers ) and the SHA1 value is 7803f160af428bcfb4b9ea2aba07886f232cde4e . 
The service itself is very straightforward : it opens a handle to explorer.exe process , duplicates its process token , reads the path of the actual malware binary from registry ( key HKLM\Software\JavaSoft , value Supplement ) and starts the malware using the duplicated process token . 
Cosmu copies itself with a couple of different filenames to % WINDIR % \system32 . 
The binaries on the disk have a variable length of zero-padding but they are all essentially copies of the original malware binary . 
The filenames for both the Cosmu copies and the service binary are generated by randomly taking two items from the following list and concatenating them , resulting in filenames like usbmon.exe , urllsa.exe , and rasdns.exe : The malware targets the following software : yy Instant messaging  Skype The malware steals Skype login MD5 . 
The attacker can obtain victim 's Skype username and password by using a bruteforce or dictionary attack to crack the MD5 . 
The attack was publicly documented in 2006 . 
 Google Talk Cosmu decrypts and steals saved credentials from Google Talk . 
 MSN Messenger Cosmu decrypts and steals saved credentials from MSN Messenger . 
yy Browsers  Google Chrome Cosmu steals saved credentials from Google Chrome . 
 Internet Explorer Cosmu steals autocomplete passwords from IE . 
It also collects information about visited websites , i.e. , browsing history . 
 Firefox Cosmu steals saved credentials and the associated URLs from Firefox . 
The malware does not decrypt the credentials . 
yy Email clients  Thunderbird Cosmu steals saved credentials and the associated mail server hostnames from Thunderbird . 
The malware does not decrypt the credentials . 
 Bat email client Cosmu steals credentials from Bat email client by parsing account.cfn and decrypting the credentials . 
 Outlook Express Cosmu steals saved credentials and information about the associated mail server from Outlook Express . 
 Outlook Cosmu steals saved credentials and information about the associated mail server from Outlook . 
 Google Desktop Cosmu decrypts and steals saved credentials from Google Desktop . 
yy Others  Windows credentials LM and NT hashes , cached domain passwords , LSA secrets . 
 WLAN Cosmu uses WlanGetProfile to retrieve plain text keys for WLANs . 
Cosmu exports certificates and , if available , the associated private keys from system store by calling PFXExportCertStoreEx . 
The malware uses the password '' saribas '' to encrypt the exported data . 
Cosmu searches the hard drives and network drives for files that match any of the below patterns : Patterns *sifr* and *sifer* are interesting because they clearly target non-English filenames , given that 'sifr ' is the Arabic word for zero ( and interestingly enough , also the base word for an encryption cipher in many languages ) . 
Cosmu searches removable drives for a broader set of files – only files whose filename matches any of the following patterns are skipped/ignored : An interesting detail is that Cosmu skips searching the removable drive if the volume name is `` trandescend '' ( case insensitive comparison ) . 
The keylogger is implemented using the GetKeyboardState API . 
Key logging is skipped if one of the following AV process is running on the system : Cosmu takes screenshots periodically and sends them to the attacker , together with other stolen data . 
Cosmu copies the content of the clipboard every 30 seconds and sends those to the attacker together with other stolen data . 
The configuration can contain the following information : yy HTTP server IPs and URL paths yy FTP server IPs , usernames and passwords yy WebDav IPs , usernames and passwords yy Filename prefix and file extension for downloaded files yy Filename prefix and file extension for exfiltrated data In all the configurations we have seen , the servers are specified using IP addresses , not domain names . 
The configuration is embedded into the info-stealer . 
It is compressed using an algorithm similar to but simpler than LZNT-1 . 
The sample makes HTTP GET requests to the server ( s ) specified in the configuration . 
The GET request contains the following fields in this order : The first field , m or mgn , does not have any value . 
The value of Auth is the ID of the sample . 
It is the same 8-character hex digit that can be found in the PDB path , among other places . 
The value of Query depends on the request . 
It is either encoded using URL safe base64 , or then the value is a 1792-character string . 
That string is composed of a 256-character string that is repeated seven times . 
The 256-character string is generated by selecting characters randomly from the following 32-character alphabet : abcdefghijklmnopqrstuvwxyz012345 The malware uses the FTP servers and WebDav servers both for exfiltrating the collected data and for updating the malware . 
All servers used by the info-stealers listed in `` Appendix A | Samples '' are listed in `` Appendix B | Servers '' . 
Cosmu uses RC4 to decrypt incoming data and encrypt outgoing data . 
The RC4 routine is not standard RC4 , but instead of an intentional customization it seems that the implementation is simply buggy . 
The mistake is illustrated in Figure 5 that shows a Python re-implementation of the buggy RC4 . 
All RC4 keys are 32 bytes . 
Here are the known keys : yy pHG5AS4deKLil9ADdR2BcA1hTNm0FQz3 yy 3Pf4GxTaDnx50qWe2Xz62uSptFsR3g3P yy AdjustKernelTableFromSSDTSpace2\x00 yy FB7V61C7509E4L99BDZ7F74A79A69CDF Even though only the first 32 bytes are used as the RC4 key , the first two RC4 keys in the above list are followed by an interesting string : Atruefriendissomeonewhothinksthatyouareagoodegg eventhoughheknowsthatyouareslightlycrackedgroove '' A true friend is someone who thinks that you are a good egg even though he knows that you are slightly cracked '' is a Bernard Meltzer quote . 
A comparison of the compilation times of the samples , and of other similarities observed in the file characteristics , reveals some interesting patterns . 
For more details , see `` Appendix A | Samples '' . 
The oldest Cosmu samples we saw have a compilation timestamp of 2001-09-25 . 
Since it is possible for the compilation timestamp to be manipulated , it may be that the samples are not that old . 
We have however not seen any samples that would give us reason to suspect that the timestamp has been tampered with . 
These old samples do not use the MiniDuke loader and therefore are not discussed in detail in this analysis . 
They do however show some characteristics that link them to these fresh variants . 
For example , the credentials and same FTP folder structure used by the old samples have been used on another Cosmu FTP server that is still active . 
All droppers were compiled on 2013-08-02 . 
The majority of the loaders were compiled on 2012-11- 13 , though one was compiled on 2012-12-04 - oddly enough , the same day when one MiniDuke payload reported by BitDefender and Kaspersky , ( md5 : 6bc34809e44c40b61dd29e0a387ee682 ) was compiled . 
This was a downloader that connects to an IP address in Turkey . 
As the server is no longer up however , we were unable to investigate it further . 
The compilation timestamps of the info-stealers show more variation . 
The oldest variant loaded with the MiniDuke loader was compiled on 2012-12-04 . 
Most of the info-stealers were compiled in February and March 2014 . 
The info-stealer samples we have analyzed can be also be separated into three distinct groupings based on the following attributes : yy The program database ( PDB ) path yy Server address and credentials yy The loader yy Filenames and decoy content Full list of the servers contacted by samples in these groupings in available in Appendix B | Servers on page 15 . 
All samples in this group have a PDB path on the infected system 's C : \ drive that contains the directory '' botgenstudio '' . 
yy c : \botgenstudio\generations\8f1777b0\bin\Bot.pdb yy c : \botgenstudio\generations\fed14e50\bin\Bot.pdb yy c : \botgenstudio\generations\55ff7700\bin\Bot.pdb All samples in this group use the same RC4 key : `` FB7V61C7509E4L99BDZ7F74A79A69CDF '' The servers used by this group are exclusive to this group , i.e. , the other sample groups do not use any of the servers group # 1 uses . 
The IP address of the servers used by this group of samples are in Luxembourg , Netherlands , and Russia . 
See `` Appendix B | Servers '' for details . 
We have seen three different droppers for this sample group . 
All droppers use the RLO trick . 
We have not found any exploits associated to this group of samples . 
All samples in this group have a PDB path that contains directories named `` NITRO '' and `` SVA '' . 
The PDB path is always on D : \ drive . 
Here are some examples : yy D : \production\nitro\sva\generations\809113dd\bin\ Bot.pdb yy D : \SVA\NITRO\PRODUCTION\Generations\805B1D01\ bin\bot.pdb yy D : \PRODUCTION\NITRO\SVA\Generations\8052B6C0\ bin\Bot.pdb yy D : \PRODUCTION\NITRO\SVA\Generations\80B8A0BA\ bin\bot.pdb All samples except one in this group use PDF files with exploits as an infection vector . 
The sole exception is sha1:98f81b03a3b0f7b0b914d783683817953e8d4cf0 . 
It does not use an exploit and it does not use a dropper ; instead the loader has a filename ( Sivil Durum Raporu Kriz Merk ? fdp.izay.exe ) that uses the same RLO trick used in Group # 1 samples . 
Another interesting detail for this sample is the PDB path : d : \sva\nitro\botgenstudio\interface\ generations\80ddfcc1\bin\Bot.pdb Even though this contains both `` SVA '' and `` NITRO '' , it also contains `` botgenstudio '' , again making it similar to Group # 1 . 
One other sample in Group # 2 ( sha1 : fb3b8f6494b211386381a7e4f6524d3e4643c9e9 ) shows a similar PDB path . 
The servers used by this group are exclusive to this group , i.e. , the other sample groups do not use any of the servers group # 2 uses . 
The most recent CosmicDuke samples all belong to this group . 
Unlike Groups # 1 and # 2 , no exploits or droppers are known to be associated with Group # 3 samples , and the loader filenames do not use the RLO trick . 
As such , we will not cover Group # 3 's delivery method further . 
Of more interest with Group # 3 is that older samples within this groupin show some differences from the latest variants . 
A few older samples in Group # 3 still use the original MiniDuke loader , while most recent ones are using the updated MiniDuke loader . 
Another difference is that unlike the older ones , the latest samples use the following PDB path : yy D : \PRODUCTION\NITRO\KSK\Generations\70BCDEA1\ bin\Bot.pdb . 
This is quite similar to Group # 2 , though it seems `` SVA '' has been replaced by `` KSK '' . 
All samples in Group # 3 connect to an FTP server at IP 188.116.32.164 using the same username ( `` adair '' ) and password . 
This is the only server that the samples with the original MiniDuke loader use . 
Meanwhile , the most recent sample in Group # 3 , which uses the updated loader with t the SHA1 value fecdba1d903a51499a3953b4df1d850fbd5438bd , also connects to another server at IP address 178.21.172.157 . 
The updated loader has PDB path , C : \Projects\NEMESIS\ nemesis-gemina\nemesis\bin\carriers\ezlzma_x86_exe . 
pdb . 
The filenames for all Info-stealer samples are all generated at runtime ( see the Persistence section on page 7 ) . 
